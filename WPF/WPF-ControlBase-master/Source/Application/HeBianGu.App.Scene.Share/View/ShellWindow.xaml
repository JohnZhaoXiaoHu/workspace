<h:MenuWindowBase x:Class="HeBianGu.App.Scene.ShellWindow"
                  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                  xmlns:h="https://github.com/HeBianGu"
                  xmlns:local="clr-namespace:HeBianGu.App.Scene"
                  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                  Title="ShellWindow"
                  Width="1300"
                  Height="800"
                  h:Cattach.Icon="&#xeb02;"
                  CaptionHeight="50"
                  DataContext="{Binding Source={StaticResource S.DataSource.Locator}, Path=ShellViewModel}"
                  mc:Ignorable="d">

    <h:MenuWindowBase.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/System/Menu.xaml" />
                <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/System/ToggleButton.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="C.MenuItem.Default" BasedOn="{StaticResource {x:Static h:MenuItemKeys.Handy}}" TargetType="MenuItem">
                <Setter Property="Command" Value="{Binding RelayCommand}" />
                <Setter Property="IsEnabled" Value="False" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Header}" />
            </Style>

            <Style x:Key="C.MenuItem.Header" BasedOn="{StaticResource {x:Static h:MenuItemKeys.Caption}}" TargetType="MenuItem" />


            <Style BasedOn="{StaticResource C.MenuItem.Default}" TargetType="MenuItem" />

            <Style x:Key="C.MenuItem.Menu" BasedOn="{StaticResource {x:Static h:MenuItemKeys.Handy}}" TargetType="MenuItem">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="VerticalAlignment" Value="Stretch" />
            </Style>

            <Style BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Single}}" TargetType="ToggleButton">
                <Setter Property="VerticalAlignment" Value="Top" />
                <Setter Property="Height" Value="60" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
            </Style>

            <DataTemplate DataType="{x:Type h:TestViewModel}">
                <Grid x:Name="grid"
                      HorizontalAlignment="Stretch"
                      Background="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                      TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.RowSpan="2"
                               Margin="10,0"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                               Text="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Tag}" />

                    <TextBlock Grid.Row="0"
                               Grid.Column="1"
                               VerticalAlignment="Bottom"
                               Text="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(h:Cattach.Detail)}" />

                    <TextBlock Grid.Row="1"
                               Grid.Column="1"
                               VerticalAlignment="Center"
                               FontWeight="Black"
                               Text="{Binding Value}" />

                    <!--<ToggleButton x:Name="tb" Style="{StaticResource {x:Static h:ToggleButtonKeys.ComboBox}}" h:Cattach.Icon="&#xe63a;"  Margin="10,0" IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=IsChecked}"
                                      Grid.Column="2" Grid.RowSpan="2" Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                                      VerticalAlignment="Center" HorizontalAlignment="Center"/>-->
                </Grid>
                <!--<DataTemplate.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=IsChecked}" Value="True">
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" TargetName="grid"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" TargetName="tb"/>
                    <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" TargetName="grid"/>
                </DataTrigger>
            </DataTemplate.Triggers>-->
            </DataTemplate>

            <DataTemplate x:Key="C.TestViewModel.Item" DataType="{x:Type h:TestViewModel}">
                <Grid x:Name="grid"
                      Width="320"
                      HorizontalAlignment="Left"
                      TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.RowSpan="2"
                               Margin="10,0"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontSize="15"
                               Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                               Text="&#xe90c;" />

                    <TextBlock Grid.Row="1"
                               Grid.Column="1"
                               VerticalAlignment="Center"
                               Text="{Binding Value}"
                               ToolTip="{Binding Value1}" />

                    <Button x:Name="btn_close"
                            Grid.Column="2"
                            Margin="10,0"
                            h:Cattach.IconSize="12"
                            h:Cattach.MouseOverForeground="{DynamicResource {x:Static h:BrushKeys.Red}}"
                            Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.Close}}"
                            Visibility="Hidden" />
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsMouseOver}" Value="True">
                        <Setter TargetName="btn_close" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="C.TestViewModel.Item.Checked" DataType="{x:Type h:TestViewModel}">
                <Grid x:Name="grid" HorizontalAlignment="Stretch" TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <CheckBox Margin="0" Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}" />

                    <TextBlock Grid.Row="1"
                               Grid.Column="1"
                               VerticalAlignment="Center"
                               Text="{Binding Value}"
                               ToolTip="{Binding Value1}" />

                    <Button x:Name="btn_close"
                            Grid.Column="2"
                            h:Cattach.IconSize="12"
                            h:Cattach.MouseOverForeground="{DynamicResource {x:Static h:BrushKeys.Red}}"
                            Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.Close}}"
                            Visibility="Hidden" />
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsMouseOver}" Value="True">
                        <Setter TargetName="btn_close" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </ResourceDictionary>
    </h:MenuWindowBase.Resources>

    <h:MenuWindowBase.MenuContent>
        <Menu DockPanel.Dock="Top" Style="{DynamicResource {x:Static h:MenuKeys.Window}}">
            <MenuItem Header="文件(F)">
                <MenuItem Header="新建场景" IsEnabled="True" />
                <MenuItem Header="新建模板" IsEnabled="True" />
                <MenuItem Header="打开场景" />
                <MenuItem Header="保存场景" />
                <MenuItem Header="另存为" />
                <MenuItem Header="退出" />
            </MenuItem>

            <MenuItem Header="编辑(E)">
                <MenuItem Header="上移" />
                <MenuItem Header="下移" />
                <MenuItem Header="复制" />
                <MenuItem Header="粘贴" />
                <MenuItem Header="删除" />
            </MenuItem>

            <MenuItem Header="设置(S)">
                <MenuItem Header="上移" />
                <MenuItem Header="下移" />
                <MenuItem Header="复制" />
                <MenuItem Header="粘贴" />
                <MenuItem Header="删除" />
            </MenuItem>

            <MenuItem Header="帮助(H)">
                <MenuItem Header="软件升级" />
                <MenuItem Header="关于" />
            </MenuItem>
        </Menu>
    </h:MenuWindowBase.MenuContent>

    <h:GitTopContainer HeaderHeight="60">
        <h:GitTopContainer.CenterContent>
            <Grid Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}">
                <h:Row Grid.Row="1" Height="Auto" Style="{DynamicResource {x:Static h:Row.Column11Key}}">
                    <Border Grid.Column="3" Grid.ColumnSpan="12" Background="{DynamicResource {x:Static h:BrushKeys.Dark0_1}}">
                        <TextBlock HorizontalAlignment="Center"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.AnimationFontSizeBackEase}}"
                                   Text="{Binding SelectedFile.Value}" />
                    </Border>
                    <Grid Grid.ColumnSpan="3">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="2*" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <TabControl h:Cattach.CaptionBackground="Transparent"
                                    h:Cattach.SearchWidth="0"
                                    BorderThickness="0"
                                    Style="{DynamicResource {x:Static h:TabControlKeys.Line}}">
                            <TabItem Width="170" Header="文件列表">
                                <DockPanel>
                                    <h:Row DockPanel.Dock="Top" Style="{DynamicResource {x:Static h:Row.Column12Key}}">
                                        <TextBlock Grid.ColumnSpan="12" Style="{DynamicResource {x:Static h:TextBlockKeys.Default}}">
                                            <Run Text="{Binding Files.Count, Mode=OneWay}" />
                                            <Run Text="文件" />
                                        </TextBlock>
                                        <Separator Grid.ColumnSpan="12" VerticalAlignment="Bottom" Background="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
                                    </h:Row>
                                    <ListBox Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                             ItemTemplate="{StaticResource C.TestViewModel.Item.Checked}"
                                             ItemsSource="{Binding Files}"
                                             SelectedItem="{Binding SelectedFile}" />
                                </DockPanel>
                            </TabItem>

                            <TabItem Width="170" HorizontalContentAlignment="Center" Header="历史记录">
                                <ListBox Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                         ItemTemplate="{StaticResource C.TestViewModel.Item}"
                                         ItemsSource="{Binding Historys}"
                                         SelectedItem="{Binding SelectedHistory}" />
                            </TabItem>
                        </TabControl>

                        <DockPanel Grid.Row="1">
                            <h:Row DockPanel.Dock="Top">
                                <TextBox Grid.ColumnSpan="12"
                                         Margin="{DynamicResource {x:Static h:ThicknessKeys.Margin_10_0}}"
                                         h:Cattach.Watermark="请输入标题"
                                         Text="{Binding Title}" />
                            </h:Row>

                            <h:Row Height="45"
                                   Margin="10,0"
                                   DockPanel.Dock="Bottom"
                                   Style="{DynamicResource {x:Static h:Row.Column12Key}}">
                                <TextBlock Grid.ColumnSpan="10"
                                           HorizontalAlignment="Left"
                                           Style="{DynamicResource {x:Static h:TextBlockKeys.Default}}"
                                           Text="Committed a minute ago" />
                                <Button Grid.Column="8"
                                        Grid.ColumnSpan="4"
                                        Width="Auto"
                                        Padding="10,0"
                                        HorizontalAlignment="Right"
                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.Dark0_8}}"
                                        BorderThickness="1"
                                        Content="Undo"
                                        Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" />
                            </h:Row>

                            <h:Row Height="45"
                                   Margin="10,0"
                                   DockPanel.Dock="Bottom"
                                   Style="{DynamicResource {x:Static h:Row.Column12Key}}">
                                <Border Grid.ColumnSpan="12"
                                        Margin="0,0"
                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.Dark0_6}}"
                                        BorderThickness="0" />
                                <Button Grid.Row="2"
                                        Grid.ColumnSpan="12"
                                        Width="Auto"
                                        Command="{Binding RelayCommand}"
                                        CommandParameter="Button.Click.Commit"
                                        Content="提交"
                                        DockPanel.Dock="Bottom" />
                            </h:Row>

                            <TextBox Height="Auto" Margin="{DynamicResource {x:Static h:ThicknessKeys.Margin_10_0}}" h:Cattach.Watermark="请输入说明" />
                        </DockPanel>
                    </Grid>
                </h:Row>
            </Grid>
        </h:GitTopContainer.CenterContent>

        <h:GitTopItem HeaderContent="{Binding CurrentScene}">
            <h:GitTopItem.HeaderTemplate>
                <DataTemplate DataType="{x:Type h:TestViewModel}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.RowSpan="2"
                                   Margin="10,0"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe6ad;" />

                        <TextBlock Grid.Row="0"
                                   Grid.Column="1"
                                   VerticalAlignment="Bottom"
                                   Text="当前场景" />

                        <TextBlock Grid.Row="1"
                                   Grid.Column="1"
                                   VerticalAlignment="Center"
                                   FontWeight="Black"
                                   Text="{Binding Value}" />

                    </Grid>
                </DataTemplate>
            </h:GitTopItem.HeaderTemplate>
            <StackPanel>
                <TextBox Margin="10" h:Cattach.Icon="&#xe787;" h:Cattach.Watermark="filter" />
                <GroupBox Margin="0,2"
                          Padding="0"
                          h:Cattach.Icon=""
                          Header="Others"
                          Style="{DynamicResource {x:Static h:GroupBoxKeys.UnderLine}}">
                    <ListBox ItemTemplate="{StaticResource C.TestViewModel.Item}" ItemsSource="{Binding Scenes}" SelectedItem="{Binding SelectedScene}">
                        <ListBox.ItemContainerStyle>
                            <Style BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="ListBoxItem">
                                <Setter Property="Background" Value="Transparent" />
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="MouseDoubleClick">
                                <h:InvokeCommandAction Command="{Binding RelayCommand}" CommandParameter="ListBox.MouseDoubleClick.SetSelectedScene" />
                                <h:InvokeCommandAction Command="{x:Static h:GitTopContainer.CoverHideCommand}" />
                            </h:EventTrigger>
                        </h:Interaction.Triggers>
                    </ListBox>
                </GroupBox>
            </StackPanel>
        </h:GitTopItem>

        <h:GitTopItem HeaderContent="{Binding CurrentTempalte}">
            <h:GitTopItem.HeaderTemplate>
                <DataTemplate DataType="{x:Type h:TestViewModel}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.RowSpan="2"
                                   Margin="10,0"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe90b;" />

                        <TextBlock Grid.Row="0"
                                   Grid.Column="1"
                                   VerticalAlignment="Bottom"
                                   Text="当前模板" />

                        <TextBlock Grid.Row="1"
                                   Grid.Column="1"
                                   VerticalAlignment="Center"
                                   FontWeight="Black"
                                   Text="{Binding Value}" />

                    </Grid>
                </DataTemplate>
            </h:GitTopItem.HeaderTemplate>
            <StackPanel>
                <TextBox Margin="10" h:Cattach.Icon="&#xe787;" h:Cattach.Watermark="filter" />
                <GroupBox Margin="0,2"
                          Padding="0"
                          h:Cattach.Icon=""
                          Header="Others"
                          Style="{DynamicResource {x:Static h:GroupBoxKeys.UnderLine}}">
                    <ListBox ItemTemplate="{StaticResource C.TestViewModel.Item}" ItemsSource="{Binding Templates}" SelectedItem="{Binding SelectedTemplate}">
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="MouseDoubleClick">
                                <h:InvokeCommandAction Command="{Binding RelayCommand}" CommandParameter="ListBox.MouseDoubleClick.SetSelectedTemplate" />
                                <h:InvokeCommandAction Command="{x:Static h:GitTopContainer.CoverHideCommand}" />
                            </h:EventTrigger>
                        </h:Interaction.Triggers>
                    </ListBox>
                </GroupBox>
            </StackPanel>
        </h:GitTopItem>

        <Grid Height="60" VerticalAlignment="Top" Opacity="1.6">
            <ProgressBar x:Name="pg"
                         Height="Auto"
                         VerticalAlignment="Stretch"
                         VerticalContentAlignment="Stretch"
                         Background="{DynamicResource {x:Static h:BrushKeys.WhiteOpactiy3}}"
                         BorderBrush="Transparent"
                         Value="{Binding Percent}" />
        </Grid>
    </h:GitTopContainer>
</h:MenuWindowBase>
