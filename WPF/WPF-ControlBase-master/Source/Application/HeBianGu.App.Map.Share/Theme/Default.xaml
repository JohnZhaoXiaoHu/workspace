<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.App.Map">

    <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/System/Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/System/ToggleButton.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/Control/Button.xaml" />
    </ResourceDictionary.MergedDictionaries>-->

    <Style x:Key="C.MenuItem.Default" BasedOn="{StaticResource {x:Static h:MenuItemKeys.Handy}}" TargetType="MenuItem">
        <Setter Property="Command" Value="{Binding RelayCommand}" />
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Header}" />
    </Style>


    <Style x:Key="C.MenuItem.Header" BasedOn="{StaticResource {x:Static h:MenuItemKeys.Caption}}" TargetType="MenuItem">
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style BasedOn="{StaticResource C.MenuItem.Default}" TargetType="MenuItem" />

    <Style x:Key="C.MenuItem.Menu" BasedOn="{StaticResource {x:Static h:MenuItemKeys.Handy}}" TargetType="MenuItem">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Single}}" TargetType="ToggleButton">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Height" Value="60" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
    </Style>

    <DataTemplate DataType="{x:Type h:TestViewModel}">
        <Grid x:Name="grid"
              HorizontalAlignment="Stretch"
              Background="{DynamicResource {x:Static h:BrushKeys.Accent}}"
              TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.RowSpan="2"
                       Margin="10,0"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                       Text="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=Tag}" />

            <TextBlock Grid.Row="0"
                       Grid.Column="1"
                       VerticalAlignment="Bottom"
                       Text="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton}, Path=(h:Cattach.Detail)}" />

            <TextBlock Grid.Row="1"
                       Grid.Column="1"
                       VerticalAlignment="Center"
                       FontWeight="Black"
                       Text="{Binding Value}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="C.TestViewModel.Item" DataType="{x:Type h:TestViewModel}">
        <Grid x:Name="grid"
              Width="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=ActualWidth}"
              HorizontalAlignment="Left"
              TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}">
            <Grid.RowDefinitions>
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.RowSpan="2"
                       Margin="10,0"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       FontSize="15"
                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                       Text="&#xe90c;" />

            <TextBlock Grid.Row="1"
                       Grid.Column="1"
                       VerticalAlignment="Center"
                       Text="{Binding Value}"
                       ToolTip="{Binding Value1}" />

            <Button Grid.Column="2"
                    Margin="0,0"
                    VerticalAlignment="Center"
                    h:Cattach.Icon="&#xe7f3;"
                    Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" />

            <Button x:Name="btn_close"
                    Grid.Column="3"
                    Margin="15,0"
                    VerticalAlignment="Center"
                    Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
            <!--<Button x:Name="btn_close" Grid.Column="2" Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" Margin="10,0"
                                                   IconSize="12" MouseOverForeground="{DynamicResource {x:Static h:BrushKeys.Red}}" Visibility="Hidden"
                                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Foreground}"/>-->
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsMouseOver}" Value="True">
                <Setter TargetName="btn_close" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="C.TestViewModel.Item.Checked" DataType="{x:Type h:TestViewModel}">
        <Grid x:Name="grid" HorizontalAlignment="Stretch" TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}">
            <Grid.RowDefinitions>
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <CheckBox Margin="10,0" Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />

            <TextBlock Grid.Row="1"
                       Grid.Column="1"
                       VerticalAlignment="Center"
                       Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                       Text="{Binding Value}"
                       ToolTip="{Binding Value1}" />


            <Button x:Name="btn_close"
                    Grid.Column="2"
                    h:Cattach.IconSize="12"
                    h:Cattach.MouseOverForeground="{DynamicResource {x:Static h:BrushKeys.Red}}"
                    Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                    Style="{DynamicResource {x:Static h:ButtonKeys.Close}}"
                    Visibility="Hidden" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsMouseOver}" Value="True">
                <Setter TargetName="btn_close" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="C.TestViewModel.Item.Many" DataType="{x:Type h:TestViewModel}">
        <Grid x:Name="grid" HorizontalAlignment="Stretch" TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}">
            <Grid.RowDefinitions>
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="1.2*" />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock Grid.Row="1"
                       Grid.Column="1"
                       VerticalAlignment="Center"
                       Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                       Text="{Binding Value}"
                       ToolTip="{Binding Value1}" />

            <TextBlock Grid.Row="1"
                       Grid.Column="2"
                       VerticalAlignment="Center"
                       Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                       Text="{Binding Value1}"
                       ToolTip="{Binding Value1}" />

            <Border x:Name="tb_v2"
                    Grid.Column="3"
                    Height="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"
                    MinWidth="60"
                    HorizontalAlignment="Center"
                    CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                <TextBlock Grid.Row="1"
                           Margin="2,0"
                           VerticalAlignment="Center"
                           Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                           Text="{Binding Value2}"
                           ToolTip="{Binding Value1}" />
            </Border>

            <Button x:Name="btn_close"
                    Grid.Column="4"
                    h:Cattach.IconSize="12"
                    h:Cattach.MouseOverForeground="{DynamicResource {x:Static h:BrushKeys.Red}}"
                    Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                    Style="{DynamicResource {x:Static h:ButtonKeys.Close}}"
                    Visibility="Hidden" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsMouseOver}" Value="True">
                <Setter TargetName="btn_close" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Value2}" Value="空闲">
                <Setter TargetName="tb_v2" Property="Background" Value="Gray" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Value2}" Value="故障">
                <Setter TargetName="tb_v2" Property="Background" Value="Red" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Value2}" Value="未连接">
                <Setter TargetName="tb_v2" Property="Background" Value="Black" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Value2}" Value="生成中">
                <Setter TargetName="tb_v2" Property="Background" Value="Green" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="C.TestViewModel.Item.Server" DataType="{x:Type h:TestViewModel}">
        <Grid x:Name="grid" HorizontalAlignment="Stretch" TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}">
            <Grid.RowDefinitions>
                <RowDefinition />
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <CheckBox Margin="2,0" Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />

            <TextBlock Grid.Row="1"
                       Grid.Column="2"
                       VerticalAlignment="Center"
                       Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                       Text="{Binding Value}"
                       ToolTip="{Binding Value1}" />
            <h:Ping Grid.Column="1"
                    IP="{Binding Value1}"
                    RunningForegroundBrush="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                    Style="{DynamicResource {x:Static h:Ping.SingleKey}}" />

            <Button x:Name="btn_close"
                    Grid.Column="4"
                    h:Cattach.IconSize="12"
                    h:Cattach.MouseOverForeground="{DynamicResource {x:Static h:BrushKeys.Red}}"
                    Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                    Style="{DynamicResource {x:Static h:ButtonKeys.Close}}"
                    Visibility="Hidden" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsMouseOver}" Value="True">
                <Setter TargetName="btn_close" Property="Visibility" Value="Visible" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>