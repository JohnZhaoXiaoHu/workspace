<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Window.Float">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/Window/WindowBase.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Float.Default, TypeInTargetAssembly={x:Type local:FloatWindowBase}}" BasedOn="{StaticResource {x:Static h:WindowBase.DefaultKey}}" TargetType="{x:Type local:FloatWindowBase}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static h:SystemKeys.FontFamily}}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IconSize" Value="15" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="SizeToContent" Value="Manual" />
        <Setter Property="Topmost" Value="True" />
        
        <Setter Property="CaptionBackground" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="CaptionForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        <Setter Property="h:Cattach.Icon" Value="&#xe65c;" />
        <Setter Property="MaxboxEnable" Value="True" />
        <Setter Property="MinboxEnable" Value="True" />
        
        <Setter Property="Padding" Value="3" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FloatWindowBase}">
                    <Grid Name="g_all">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Grid Margin="1">
                            
                            <AdornerDecorator>
                                <ContentPresenter Content="{TemplateBinding Content}" />
                            </AdornerDecorator>

                            <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" Margin="20"
                                           Command="{x:Static h:Commander.Close}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>-->
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate DataType="{x:Type local:IconFloatModel}">
        <Grid>
            <Button x:Name="bt"
                       Height="Auto"
                       Margin="5,2"
                       HorizontalAlignment="Center"
                       h:Cattach.IconSize="50"
                       h:Cattach.Icon="{Binding Icon}"
                       RenderTransform="{StaticResource {x:Static h:SystemKeys.TransformGroup}}"
                       Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}"
                       Tag="{Binding}"
                       ToolTip="{Binding DisplayName}">
                <h:Interaction.Triggers>
                    <h:EventTrigger EventName="Click">
                        <h:CallMethodAction MethodName="Do" TargetObject="{Binding ElementName=bt, Path=Tag}" />
                        <h:InvokeCommandAction Command="{Binding RelayCommand}" CommandParameter="sss" PassEventArgsToCommand="True" />
                    </h:EventTrigger>
                </h:Interaction.Triggers>
            </Button>
        </Grid>
    </DataTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Float.Circle, TypeInTargetAssembly={x:Type local:FloatWindowBase}}" BasedOn="{StaticResource {x:Static local:FloatWindowBase.DefaultKey}}" TargetType="{x:Type local:FloatWindowBase}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FloatWindowBase}">
                    <Grid Name="g_all">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Grid Margin="1">
                            
                            <AdornerDecorator>
                                <Grid>
                                    <h:ToggleExpander HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      h:Cattach.IconSize="60"
                                                      Background="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}"
                                                      ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:FloatWindowBase}, Path=Source}"
                                                      Style="{DynamicResource {x:Static h:ToggleExpander.DefaultKey}}">
                                        <h:ToggleExpander.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <h:CirclePanel Margin="40" IsAnimation="False" Len="100" />
                                            </ItemsPanelTemplate>
                                        </h:ToggleExpander.ItemsPanel>
                                    </h:ToggleExpander>
                                </Grid>
                            </AdornerDecorator>

                            <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" Margin="20"
                                           Command="{x:Static h:Commander.Close}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>-->
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Float.Arc, TypeInTargetAssembly={x:Type local:FloatWindowBase}}" BasedOn="{StaticResource {x:Static local:FloatWindowBase.DefaultKey}}" TargetType="{x:Type local:FloatWindowBase}">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FloatWindowBase}">
                    <Grid Name="g_all">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Grid Margin="1">
                            
                            <AdornerDecorator>
                                <Grid>
                                    <h:ToggleExpander HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      h:Cattach.IconSize="60"
                                                      Background="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}"
                                                      ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:FloatWindowBase}, Path=Source}"
                                                      Style="{DynamicResource {x:Static h:ToggleExpander.SingleKey}}">
                                        <h:ToggleExpander.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <h:ArcPanel Margin="40"
                                                            EndAngle="100"
                                                            IsAnimation="False"
                                                            Len="100"
                                                            StartAngle="-10" />
                                            </ItemsPanelTemplate>
                                        </h:ToggleExpander.ItemsPanel>
                                    </h:ToggleExpander>
                                </Grid>
                            </AdornerDecorator>

                            <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" Margin="20"
                                           Command="{x:Static h:Commander.Close}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>-->
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Float.StackPanel, TypeInTargetAssembly={x:Type local:FloatWindowBase}}" BasedOn="{StaticResource {x:Static local:FloatWindowBase.DefaultKey}}" TargetType="{x:Type local:FloatWindowBase}">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="DockPanel.Dock" Value="Right" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FloatWindowBase}">
                    <Grid Name="g_all">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Grid Margin="1">
                            
                            <AdornerDecorator>
                                <Grid>
                                    <h:ToggleExpander HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      h:Cattach.CornerRadius="35"
                                                      h:Cattach.IconSize="50"
                                                      Background="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}"
                                                      DockPanel.Dock="{TemplateBinding DockPanel.Dock}"
                                                      ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:FloatWindowBase}, Path=Source}"
                                                      Style="{DynamicResource {x:Static h:ToggleExpander.SingleKey}}">
                                        <h:ToggleExpander.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </h:ToggleExpander.ItemsPanel>
                                    </h:ToggleExpander>
                                </Grid>
                            </AdornerDecorator>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Float.StackPanel.TopRight, TypeInTargetAssembly={x:Type local:FloatWindowBase}}" BasedOn="{StaticResource {x:Static h:FloatWindowBase.StackPanelKey}}" TargetType="{x:Type local:FloatWindowBase}">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="DockPanel.Dock" Value="Right" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Float.StackPanel.TopLeft, TypeInTargetAssembly={x:Type local:FloatWindowBase}}" BasedOn="{StaticResource {x:Static h:FloatWindowBase.StackPanelKey}}" TargetType="{x:Type local:FloatWindowBase}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="DockPanel.Dock" Value="Left" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Float.StackPanel.BottomLeft, TypeInTargetAssembly={x:Type local:FloatWindowBase}}" BasedOn="{StaticResource {x:Static h:FloatWindowBase.StackPanelKey}}" TargetType="{x:Type local:FloatWindowBase}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="DockPanel.Dock" Value="Left" />
    </Style>

</ResourceDictionary>
