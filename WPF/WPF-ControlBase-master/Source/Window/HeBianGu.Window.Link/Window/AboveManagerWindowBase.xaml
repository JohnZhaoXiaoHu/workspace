<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cl="clr-namespace:System.Collections;assembly=mscorlib"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Window.Link">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Window.Message;component/MessageWindowBase.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Above.Default, TypeInTargetAssembly={x:Type local:AboveManagerWindowBase}}" BasedOn="{StaticResource {x:Static h:MessageWindowBase.DynamicKey}}" TargetType="{x:Type local:AboveManagerWindowBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AboveManagerWindowBase}">
                    <Grid Name="g_all" Background="Transparent">
                        <Border x:Name="Bg"
                                Margin="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Window}}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <Grid Margin="{TemplateBinding Padding}">
                            <AdornerDecorator Grid.Row="1" WindowChrome.IsHitTestVisibleInChrome="True">
                                <Grid>
                                    <h:NotifyIcon x:Name="PART_NotifyIcon"
                                                  Command="{Binding Path=MinimizeWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Icon="{Binding Path=NotifyIconSource, RelativeSource={RelativeSource TemplatedParent}}"
                                                  IconVisibility="Visible"
                                                  Text="{TemplateBinding Title}">
                                        <FrameworkElement.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NotifyWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="显示面板" />
                                                <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NotifyWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="隐藏" />
                                                <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CloseWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="退出" />
                                            </ContextMenu>
                                        </FrameworkElement.ContextMenu>
                                    </h:NotifyIcon>
                                    <Grid>
                                        <h:DialogHost HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Identifier="windowDialog">
                                            <Grid ClipToBounds="False" Effect="{TemplateBinding AdornerDecoratorEffect}">
                                                <ScrollViewer>
                                                    <h:Interaction.Triggers>
                                                        <h:EventTrigger EventName="Loaded">
                                                            <h:InvokeRandomSplitAnimationAction IsUseAll="True" SplitMilliSecond="-900">
                                                                <h:InvokeRandomSplitAnimationAction.Timelines>
                                                                    <h:RandomDoubleAnimation Max="800" Min="-800"
                                                                                             UseFrom="True"
                                                                                             UseTo="False"
                                                                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                                                                             To="0"
                                                                                             Duration="00:00:01" />
                                                                    <h:RandomDoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                                             From="0" To="1"
                                                                                             Duration="00:00:01" />
                                                                </h:InvokeRandomSplitAnimationAction.Timelines>
                                                            </h:InvokeRandomSplitAnimationAction>
                                                        </h:EventTrigger>
                                                    </h:Interaction.Triggers>
                                                    <ItemsControl ItemsSource="{TemplateBinding LinkActionGroups}">
                                                        <ItemsControl.ItemTemplate>
                                                            <DataTemplate DataType="{x:Type h:LinkActionGroup}">
                                                                <GroupBox h:Cattach.IconSize="20"
                                                                          Background="Transparent"
                                                                          FontSize="{StaticResource {x:Static h:FontSizeKeys.Header2}}"
                                                                          Header="{Binding DisplayName}"
                                                                          Style="{DynamicResource {x:Static h:GroupBoxKeys.UnderLine}}">
                                                                    <h:Interaction.Behaviors>
                                                                        <h:DragMoveWindowBehavior />
                                                                    </h:Interaction.Behaviors>

                                                                    <ListBox Background="Transparent"
                                                                             BorderBrush="Transparent"
                                                                             ItemTemplate="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}, Path=LinkActionDataTemplate}"
                                                                             ItemsPanel="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}, Path=ItemsPanel}"
                                                                             ItemsSource="{Binding Links}"
                                                                             SelectedItem="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}, Path=CurrentLink}"
                                                                             Style="{DynamicResource {x:Static h:ListBoxKeys.Clear}}">

                                                                        <h:Interaction.Triggers>
                                                                            <h:EventTrigger EventName="SelectionChanged">
                                                                                <h:ChangePropertyAction PropertyName="IsboveState" TargetObject="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}}" Value="true" />
                                                                            </h:EventTrigger>

                                                                            <h:EventTrigger EventName="Loaded">
                                                                                <h:InvokeTimeSplitAnimationAction SplitMilliSecond="-700">
                                                                                    <h:InvokeTimeSplitAnimationAction.Timelines>
                                                                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                                                                                         From="300" To="0"
                                                                                                         Duration="00:00:01" />
                                                                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                                                         From="0" To="1"
                                                                                                         Duration="00:00:01" />
                                                                                    </h:InvokeTimeSplitAnimationAction.Timelines>
                                                                                </h:InvokeTimeSplitAnimationAction>
                                                                            </h:EventTrigger>
                                                                        </h:Interaction.Triggers>

                                                                        <ListBox.ItemContainerStyle>
                                                                            <Style TargetType="ListBoxItem">
                                                                                <Setter Property="RenderTransform" Value="{DynamicResource {x:Static h:SystemKeys.TransformGroup}}" />
                                                                                <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                                                                                <Setter Property="Template">
                                                                                    <Setter.Value>
                                                                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                                            <Border x:Name="boder">
                                                                                                <ContentPresenter />
                                                                                            </Border>
                                                                                        </ControlTemplate>
                                                                                    </Setter.Value>
                                                                                </Setter>
                                                                            </Style>
                                                                        </ListBox.ItemContainerStyle>
                                                                    </ListBox>
                                                                </GroupBox>
                                                            </DataTemplate>
                                                        </ItemsControl.ItemTemplate>
                                                    </ItemsControl>
                                                </ScrollViewer>

                                                <Grid h:TransitionService.IsVisible="{TemplateBinding IsboveState}" Visibility="Collapsed">
                                                    <h:TransitionService.VisibleActions>
                                                        <h:ScaleTransition />
                                                    </h:TransitionService.VisibleActions>

                                                    <GroupBox h:Cattach.Icon="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CurrentLink.Logo}"
                                                              h:Cattach.IconSize="20"
                                                              FontSize="{StaticResource {x:Static h:FontSizeKeys.Header2}}"
                                                              Header="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CurrentLink.DisplayName}"
                                                              Style="{DynamicResource {x:Static h:GroupBoxKeys.UnderLine}}">
                                                        <h:Interaction.Behaviors>
                                                            <h:DragMoveWindowBehavior />
                                                        </h:Interaction.Behaviors>

                                                        <DockPanel>
                                                            <Control DockPanel.Dock="Left" Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.LeftTemplate)}" />
                                                            <Control DockPanel.Dock="Right" Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.RightTemplate)}" />
                                                            <Control DockPanel.Dock="Bottom" Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.BottomTemplate)}" />
                                                            <Control DockPanel.Dock="Top" Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.TopTemplate)}" />
                                                            <Grid>
                                                                <local:LinkActionPanel LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CurrentLink}" />
                                                                <Control Template="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CenterTemplate)}" />
                                                            </Grid>
                                                        </DockPanel>
                                                    </GroupBox>


                                                    <Button Margin="10" Style="{DynamicResource {x:Static h:ButtonKeys.CloseMouseOver}}">
                                                        <h:Interaction.Triggers>
                                                            <h:EventTrigger EventName="Click">
                                                                <h:ChangePropertyAction PropertyName="CurrentLink" TargetObject="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}}" Value="{x:Null}" />
                                                                <h:ChangePropertyAction PropertyName="IsboveState" TargetObject="{Binding RelativeSource={RelativeSource AncestorType=local:AboveManagerWindowBase}}" Value="false" />
                                                            </h:EventTrigger>
                                                        </h:Interaction.Triggers>
                                                    </Button>
                                                </Grid>

                                                <h:ContainPanel x:Name="PART_LAYERGROUP"
                                                                Grid.Row="1"
                                                                Background="{DynamicResource {x:Static h:BrushKeys.DialogCover}}"
                                                                ClipToBounds="True"
                                                                Visibility="Collapsed">
                                                    <h:ContainPanel.AnimationAction>
                                                        <h:ScaleTransition />
                                                    </h:ContainPanel.AnimationAction>
                                                </h:ContainPanel>
                                            </Grid>
                                        </h:DialogHost>
                                        <h:MessageContainer x:Name="PART_Message" />
                                        <h:Snackbar x:Name="PART_SnackBar" MessageQueue="{h:MessageQueue}" />
                                    </Grid>
                                </Grid>
                            </AdornerDecorator>
                        </Grid>
                        <Button x:Name="btn_close_window"
                                Width="60"
                                Height="60"
                                Margin="0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                h:Cattach.CornerRadius="40"
                                h:Cattach.Icon="&#xe6f4;"
                                h:Cattach.IconSize="25"
                                h:Cattach.MouseOverBackground="Red"
                                Command="{Binding Path=CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}"
                                Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsboveState, Converter={x:Static h:XConverter.FalseToVisibilityConverter}}"
                                WindowChrome.IsHitTestVisibleInChrome="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:AboveManagerWindowBase.DefaultKey}}" TargetType="{x:Type local:AboveManagerWindowBase}" />
</ResourceDictionary>
