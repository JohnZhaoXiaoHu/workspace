<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Window.Ribbon">

    <Style x:Key="{x:Type local:RibbonWindowBase}" TargetType="{x:Type local:RibbonWindowBase}">
        <!--<Setter Property="shell:WindowChrome.WindowChrome" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon},ResourceId=WindowChromeGeneric}}"/>-->
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static h:SystemKeys.FontFamily}}" />
        <Setter Property="Width" Value="480" />
        <Setter Property="Height" Value="320" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--<Setter Property="IconSize" Value="20" />-->
        <!--<Setter Property="CaptionHeight" Value="26" />

        <Setter Property="CaptionBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="CaptionForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />-->
        <!--<Setter Property="Icon" Value="&#xe79c;" />-->
        <!--<Setter Property="MaxboxEnable" Value="True" />
        <Setter Property="MinboxEnable" Value="True" />-->
        <!--<Setter Property="NotifyIconSource" Value="/HeBianGu.General.WpfControlLib;component/Resources/iBook.ico" />-->
        <Setter Property="Padding" Value="15" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="CaptionBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="CaptionForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.Icon" Value="&#xe754;" />
        <Setter Property="h:Cattach.IconMargin" Value="10 0 0 0" />
        <Setter Property="h:Cattach.IconSize" Value="25" />

        <!--<Setter Property="DefaultBlurEffect">
            <Setter.Value>
                <BlurEffect />
            </Setter.Value>
        </Setter>-->
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />

        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="ResizeMode" Value="CanMinimize" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" GlassFrameThickness="-1" ResizeBorderThickness="8" />
            </Setter.Value>
        </Setter>
        <Setter Property="h:TransitionService.VisibleActions">
            <Setter.Value>
                <h:TransitionCollection>
                    <h:ScaleGeomotryTransition HideDuration="500" PointOriginType="MouseInnerOrCenter" VisibleDuration="1500" />
                </h:TransitionCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="NotifyIconSource" Value="/HeBianGu.General.WpfControlLib;component/Resources/iBook.ico" />

        <!--
            =================================================================
            Classic (the default template)
            ==================================================================
        -->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonWindow}">
                    <ControlTemplate.Resources>
                        <Style x:Key="&#303;" TargetType="{x:Type Button}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                                            <Border x:Name="OuterTopLeftBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" BorderThickness="1,1,0,0" />
                                            <Border x:Name="OuterBottomRightBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" BorderThickness="0,0,1,1" />
                                            <Border x:Name="InnerTopLeftBorder"
                                                    Margin="1"
                                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                                    BorderThickness="1,1,0,0" />
                                            <Border x:Name="InnerBottomRightBorder"
                                                    Margin="1"
                                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                                    BorderThickness="0,0,1,1" />
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="OuterTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                                                <Setter TargetName="OuterBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                                                <Setter TargetName="InnerTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                                                <Setter TargetName="InnerBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Bg"
                                Margin="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Window}}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <Grid>
                            <Border Name="NonClientAreaBorder"
                                    Panel.ZIndex="0"
                                    Background="Yellow"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <Border Name="PART_ClientAreaBorder"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />
                            </Border>

                            <Border Panel.ZIndex="1"
                                    Background="Green"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                    BorderThickness="1,1,0,0" />

                            <Border Panel.ZIndex="2"
                                    Background="Purple"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                    BorderThickness="0,0,1,1" />

                            <Border Name="WindowHighlightBorder"
                                    Margin="1"
                                    Panel.ZIndex="3"
                                    Background="Orange"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                    BorderThickness="1,1,0,0" />

                            <Border Name="WindowShadowBorder"
                                    Margin="1"
                                    Panel.ZIndex="4"
                                    Background="Gray"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                    BorderThickness="0,0,1,1" />

                            <Border Name="MiddleBorder"
                                    Margin="2"
                                    Panel.ZIndex="5"
                                    Background="AliceBlue"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
                                    BorderThickness="1" />

                            <Grid Name="ButtonBkgPanel"
                                  Height="{Binding Path=(WindowChrome.WindowChrome).CaptionHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                  Margin="{Binding Path=(WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Top"
                                  Panel.ZIndex="6"
                                  Background="{Binding Path=ActiveCaptionBrush, RelativeSource={RelativeSource TemplatedParent}}" />

                            <Border x:Name="wndBorder"
                                    Panel.ZIndex="7"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="{Binding Path=(WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid>
                                    <AdornerDecorator>
                                        <Grid>
                                            <h:NotifyIcon x:Name="PART_NotifyIcon"
                                                          Command="{Binding Path=MinimizeWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                          Icon="{Binding Path=NotifyIconSource, RelativeSource={RelativeSource TemplatedParent}}"
                                                          IconVisibility="Visible"
                                                          Text="{TemplateBinding Title}">

                                                <FrameworkElement.ContextMenu>
                                                    <ContextMenu>
                                                        <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NotifyWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="显示面板" />

                                                        <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NotifyWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="隐藏" />

                                                        <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CloseWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="退出" />
                                                    </ContextMenu>
                                                </FrameworkElement.ContextMenu>
                                            </h:NotifyIcon>

                                            <h:DialogHost Margin="0" Identifier="windowDialog">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto" />
                                                        <RowDefinition />
                                                    </Grid.RowDefinitions>
                                                    <Grid Height="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" />

                                                    <ContentPresenter Name="PART_RootContentPresenter" Grid.RowSpan="2" />

                                                    <h:ContainPanel x:Name="PART_LAYERGROUP"
                                                                    Grid.Row="1"
                                                                    Background="{DynamicResource {x:Static h:BrushKeys.DialogCover}}"
                                                                    ClipToBounds="True"
                                                                    Visibility="Collapsed">
                                                        <h:ContainPanel.AnimationAction>
                                                            <h:ScaleTransition />
                                                        </h:ContainPanel.AnimationAction>
                                                    </h:ContainPanel>

                                                    <h:MessageContainer x:Name="PART_Message" Grid.Row="1" />
                                                </Grid>

                                            </h:DialogHost>
                                            <h:Snackbar x:Name="PART_SnackBar" MessageQueue="{h:MessageQueue}" />
                                        </Grid>
                                    </AdornerDecorator>
                                    <ResizeGrip x:Name="WindowResizeGrip"
                                                HorizontalAlignment="Right"
                                                VerticalAlignment="Bottom"
                                                IsTabStop="false"
                                                Visibility="Collapsed"
                                                WindowChrome.ResizeGripDirection="BottomRight" />
                                </Grid>
                            </Border>

                            <Grid Name="ButtonPanel"
                                  Height="{Binding Path=(WindowChrome.WindowChrome).CaptionHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                  Margin="{Binding Path=(WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                                  VerticalAlignment="Top"
                                  Panel.ZIndex="8">
                                <!--<Image Name="PART_Icon"
                                       Margin="3,0,0,0"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Center"
                                       Panel.ZIndex="0"
                                       RenderOptions.BitmapScalingMode="{TemplateBinding RenderOptions.BitmapScalingMode}"
                                       Stretch="Uniform"
                                       WindowChrome.IsHitTestVisibleInChrome="True" />-->

                                <TextBlock Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconMargin)}"
                                           HorizontalAlignment="Left"
                                           VerticalAlignment="Center"
                                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconSize)}"
                                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CaptionForeground}"
                                           Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.Icon)}" />
                                <!--  Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon, Converter={StaticResource &#302;}}"  -->
                                <!--
                                    Width="{Binding Path=SmallIconSize.Width, Source={x:Static shell:SystemParameters2.Current}}"
                                    Height="{Binding Path=SmallIconSize.Height, Source={x:Static shell:SystemParameters2.Current}}"
                                -->

                                <StackPanel HorizontalAlignment="Right" Panel.ZIndex="1" Orientation="Horizontal">

                                    <!--
                                        Width="{Binding Path=WindowCaptionButtonsLocation.Width, Source={x:Static shell:SystemParameters2.Current}}"
                                        Height="{Binding Path=WindowCaptionButtonsLocation.Height, Source={x:Static shell:SystemParameters2.Current}}"
                                    -->



                                    <ItemsControl Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CaptionForeground}" Style="{DynamicResource {x:Static h:MvpKeys.WindowCaption}}" />


                                    <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.HideWindow}}" />

                                    <ToggleButton x:Name="btnTheme" Style="{DynamicResource S.ToggleButton.Window.Theme}" />

                                    <Button Style="{DynamicResource S.Button.Window.Setting}" />-->

                                    <Button Name="PART_MinimizeWindowButton"
                                            Grid.Column="0"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Command="SystemCommands.MinimizeWindowCommand"
                                            Focusable="False"
                                            Style="{DynamicResource {x:Static h:ButtonKeys.MinimizeWindow}}"
                                            WindowChrome.IsHitTestVisibleInChrome="True" />

                                    <Button Name="PART_RestoreWindowButton"
                                            Grid.Column="1"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            Command="SystemCommands.RestoreWindowCommand"
                                            Focusable="False"
                                            Style="{DynamicResource {x:Static h:ButtonKeys.RestoreWindow}}"
                                            Visibility="Collapsed"
                                            WindowChrome.IsHitTestVisibleInChrome="True" />

                                    <Button Name="PART_MaximizeWindowButton"
                                            Grid.Column="1"
                                            Command="SystemCommands.MaximizeWindowCommand"
                                            Style="{DynamicResource {x:Static h:ButtonKeys.MaximizeWindow}}" />

                                    <Button Name="PART_CloseWindowButton"
                                            Grid.Column="2"
                                            HorizontalAlignment="Stretch"
                                            VerticalAlignment="Stretch"
                                            h:Cattach.GuideData="点击后程序退出"
                                            h:Cattach.GuideTitle="退出程序"
                                            h:Cattach.UseGuide="True"
                                            Focusable="False"
                                            Style="{DynamicResource {x:Static h:ButtonKeys.CloseWindow}}"
                                            WindowChrome.IsHitTestVisibleInChrome="True" />

                                    <!--  Command="SystemCommands.CloseWindowCommand"  -->
                                </StackPanel>

                                <!--<Popup x:Name="Pop"
                                       HorizontalAlignment="Left"
                                       VerticalAlignment="Bottom"
                                       AllowsTransparency="True"
                                       IsOpen="{Binding ElementName=btnTheme, Path=IsChecked}"
                                       Placement="Top"
                                       PlacementTarget="{Binding ElementName=btnTheme}"
                                       PopupAnimation="Slide"
                                       StaysOpen="False">
                                    <Border Background="{DynamicResource {x:Static h:BrushKeys.AccentOpacity5}}"
                                            BorderBrush="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                            BorderThickness="1"
                                            CornerRadius="5">
                                        <StackPanel Margin="10">
                                            <h:ThemeSet Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                                        </StackPanel>
                                    </Border>
                                </Popup>-->
                            </Grid>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="ButtonBkgPanel" Property="Background" Value="{Binding Path=InactiveCaptionBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey}}" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_RestoreWindowButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="wndBorder" Property="BorderThickness" Value="2" />
                            <Setter TargetName="ButtonPanel" Property="Margin" Value="2" />
                            <Setter TargetName="ButtonBkgPanel" Property="Margin" Value="2" />
                        </Trigger>
                        <!--<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}" Value="True">
                            <Setter TargetName="PART_MinimizeWindowButton" Property="Width" Value="18"/>
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Width" Value="18"/>
                            <Setter TargetName="PART_RestoreWindowButton" Property="Width" Value="18"/>
                            <Setter TargetName="PART_CloseWindowButton" Property="Width" Value="18"/>
                        </DataTrigger>-->
                        <!--<Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="PART_Icon" Property="Source" Value="/HeBianGu.General.WpfControlLib;component/Resources/iBook.ico" />
                        </Trigger>-->
                        <MultiTrigger>
                            <!--
                                There may be perf implications b/c of the following conditions.  We may cause
                                an extra layout to happen when WindowState changes to Minimized and ResizeMode
                                is set to CanResizeWithGrip.
                                NavigationWindow's style requires the ResizeMode condition tag even though
                                Window's style already takes care of this condition.
                            -->
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="Window.WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.RibbonWindowBase.Default" BasedOn="{StaticResource {x:Type local:RibbonWindowBase}}" TargetType="{x:Type local:RibbonWindowBase}" />

    <!--<Style BasedOn="{StaticResource S.RibbonWindowBase.Default}" TargetType="{x:Type local:RibbonWindowBase}" />-->

</ResourceDictionary>

