using HeBianGu.Base.WpfBase;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;
using System.Windows.Threading;
using System.Xml.Serialization;

namespace HeBianGu.Systems.Print
{
    public class PrintDataGrid : DataGrid
    {
        public static ComponentResourceKey DefaultKey => new ComponentResourceKey(typeof(PrintDataGrid), "S.PrintDataGrid.Default");

        static PrintDataGrid()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(PrintDataGrid), new FrameworkPropertyMetadata(typeof(PrintDataGrid)));
        }

        public ObservableCollection<ColumnPropertyInfo> ColumnPropertyInfos
        {
            get { return (ObservableCollection<ColumnPropertyInfo>)GetValue(ColumnPropertyInfosProperty); }
            set { SetValue(ColumnPropertyInfosProperty, value); }
        }

        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ColumnPropertyInfosProperty =
            DependencyProperty.Register("ColumnPropertyInfos", typeof(ObservableCollection<ColumnPropertyInfo>), typeof(PrintDataGrid), new FrameworkPropertyMetadata(new ObservableCollection<ColumnPropertyInfo>(), (d, e) =>
            {
                PrintDataGrid control = d as PrintDataGrid;

                if (control == null) return;

                if (e.OldValue is ObservableCollection<ColumnPropertyInfo> o)
                {
                    foreach (var item in o)
                    {
                        item.PropertyChanged -= control.Item_PropertyChanged;
                    }
                }

                if (e.NewValue is ObservableCollection<ColumnPropertyInfo> n)
                {
                    foreach (var item in n)
                    {
                        item.PropertyChanged -= control.Item_PropertyChanged;
                        item.PropertyChanged += control.Item_PropertyChanged;
                    }
                }
            }));

        private void Item_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            //  ToDo：优化刷新 找一找刷新列的方法
            this.Dispatcher.DelayInvoke(() =>
            {
                this.OnItemsSourceChanged(this.ItemsSource, this.ItemsSource);
            });
           
        }

        protected override void OnAutoGeneratedColumns(EventArgs e)
        {
            base.OnAutoGeneratedColumns(e);

            ////将创建过程标记为已取消,以阻止DataGrid将生成的列对象加入到列集合中.
            ////Set event to cancel,DataGrid will not add current column to the Columns collection.
            //e.Cancel = true;

            ////从Attribute中读取显示名称.
            ////Read display name from Attribute.
            //var displayName = ((System.ComponentModel.MemberDescriptor)e.PropertyDescriptor).DisplayName;
            //if (!string.IsNullOrWhiteSpace(displayName))
            //{
            //    e.Column.Header = displayName;
            //}

            ////从Attribute中读取顺序,以及是否自动生成列的标识.
            ////Read order from Attribute and whether to automatically generate column.
            //var attributes = ((System.ComponentModel.MemberDescriptor)e.PropertyDescriptor).Attributes;
            //var order = 0;
            //foreach (Attribute attribute in attributes)
            //{
            //    if (attribute is DataGridColumnOrderAttribute orderAttribute)
            //    {
            //        order = orderAttribute.DataGridColumnOrder;
            //    }
            //    else if (attribute is DoNotAutoGenerateDataGridColumnAttribute)
            //    {
            //        //发现 DoNotAutoGenerateDataGridColumnAttribute 时,丢弃已生成的列
            //        //Discard generated column when DoNotAutoGenerateDataGridColumnAttribute is found
            //        return;
            //    }
            //}

            ////将创建的列及顺序保存
            ////Save the column and order
            //_columnAndOrderList.Add(new ColumnAndOrder(order, e.Column));
        }

        protected override void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e)
        {
            var find = this.ColumnPropertyInfos.FirstOrDefault(x => x.PropertyInfo.Name == e.PropertyName);
            if (find != null)
            {
                e.Cancel = !find.IsVisible;
                e.Column.Header = find.Header;
            }
            else
            {
                e.Cancel=true;

                //var displayName = GetPropertyDisplayName(e.PropertyDescriptor);
                //if (!string.IsNullOrEmpty(displayName))
                //{
                //    e.Column.Header = displayName;
                //}
            }
            //base.OnAutoGeneratingColumn(e);
        }

        string GetPropertyDisplayName(object descriptor)
        {
            if (descriptor is PropertyDescriptor pd)
            {
                var displayName = pd.Attributes[typeof(DisplayAttribute)] as DisplayAttribute;
                if (displayName != null)
                    return displayName.Name;
            }
            if (descriptor is PropertyInfo pi)
            {
                Object[] attributes = pi.GetCustomAttributes(typeof(DisplayAttribute), true);
                for (int i = 0; i < attributes.Length; ++i)
                {
                    var displayName = attributes[i] as DisplayAttribute;
                    if (displayName != null)
                        return displayName.Name;
                }
            }
            return null;
        }
    }
}
