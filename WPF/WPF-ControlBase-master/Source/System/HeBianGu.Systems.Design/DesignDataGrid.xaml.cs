using HeBianGu.Base.WpfBase;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;
using System.Windows.Threading;
using System.Xml.Serialization;

namespace HeBianGu.Systems.Design
{
    public class DesignDataGrid : DataGrid
    {
        public static ComponentResourceKey DefaultKey => new ComponentResourceKey(typeof(DesignDataGrid), "S.DesignDataGrid.Default");

        static DesignDataGrid()
        {
            DefaultStyleKeyProperty.OverrideMetadata(typeof(DesignDataGrid), new FrameworkPropertyMetadata(typeof(DesignDataGrid)));
        }

        public ObservableCollection<ColumnPropertyInfo> ColumnPropertyInfos
        {
            get { return (ObservableCollection<ColumnPropertyInfo>)GetValue(ColumnPropertyInfosProperty); }
            set { SetValue(ColumnPropertyInfosProperty, value); }
        }

        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ColumnPropertyInfosProperty =
            DependencyProperty.Register("ColumnPropertyInfos", typeof(ObservableCollection<ColumnPropertyInfo>), typeof(DesignDataGrid), new FrameworkPropertyMetadata(new ObservableCollection<ColumnPropertyInfo>(), (d, e) =>
            {
                DesignDataGrid control = d as DesignDataGrid;

                if (control == null) return;

                if (e.OldValue is ObservableCollection<ColumnPropertyInfo> o)
                {
                    foreach (var item in o)
                    {
                        item.PropertyChanged -= control.Item_PropertyChanged;
                    }
                }

                if (e.NewValue is ObservableCollection<ColumnPropertyInfo> n)
                {
                    foreach (var item in n)
                    {
                        item.PropertyChanged -= control.Item_PropertyChanged;
                        item.PropertyChanged += control.Item_PropertyChanged;
                    }
                }
            }));

        private void Item_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            //  ToDo：优化刷新 找一找刷新列的方法
            this.Dispatcher.DelayInvoke(() =>
            {
                this.OnItemsSourceChanged(this.ItemsSource, this.ItemsSource);
            });

        }

        protected override void OnAutoGeneratedColumns(EventArgs e)
        {
            base.OnAutoGeneratedColumns(e);
        }

        protected override void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e)
        {
            //  Do ：空时默认方式生成列
            if (this.ColumnPropertyInfos == null)
            {
                base.OnAutoGeneratingColumn(e);
                return;
            }
            var find = this.ColumnPropertyInfos.FirstOrDefault(x => x.PropertyInfo.Name == e.PropertyName);
            if (find != null)
            {
                e.Cancel = !find.IsVisible;
                e.Column.Header = find.Header;
            }
            else
            {
                e.Cancel = true;
            }
        }

        string GetPropertyDisplayName(object descriptor)
        {
            if (descriptor is PropertyDescriptor pd)
            {
                var displayName = pd.Attributes[typeof(DisplayAttribute)] as DisplayAttribute;
                if (displayName != null)
                    return displayName.Name;
            }
            if (descriptor is PropertyInfo pi)
            {
                Object[] attributes = pi.GetCustomAttributes(typeof(DisplayAttribute), true);
                for (int i = 0; i < attributes.Length; ++i)
                {
                    var displayName = attributes[i] as DisplayAttribute;
                    if (displayName != null)
                        return displayName.Name;
                }
            }
            return null;
        }
    }

    //[Display(Name = "列头设置")]
    //public class ColumnPropertyInfo : NotifyPropertyChangedBase
    //{
    //    public ColumnPropertyInfo(PropertyInfo t)
    //    {
    //        var display = t.GetCustomAttribute<DisplayAttribute>();
    //        this.Header = display?.Name ?? t.Name;
    //        this.PropertyInfo = t;
    //    }
    //    [XmlIgnore]
    //    [Browsable(false)]
    //    public PropertyInfo PropertyInfo { get; }

    //    private string _header;
    //    [Display(Name = "列名")]
    //    public string Header
    //    {
    //        get { return _header; }
    //        set
    //        {
    //            _header = value;
    //            RaisePropertyChanged();
    //        }
    //    }

    //    //private double _width = double.NaN;
    //    //[Display(Name = "列宽")]
    //    //public double Width
    //    //{
    //    //    get { return _width; }
    //    //    set
    //    //    {
    //    //        _width = value;
    //    //        RaisePropertyChanged();
    //    //    }
    //    //}

    //    //private int _displayIndex;
    //    //[Display(Name = "排序")]
    //    //public int DisplayIndex
    //    //{
    //    //    get { return _displayIndex; }
    //    //    set
    //    //    {
    //    //        _displayIndex = value;
    //    //        RaisePropertyChanged();
    //    //    }
    //    //}

    //    private bool _isVisible;
    //    [Display(Name = "显示")]
    //    public bool IsVisible
    //    {
    //        get { return _isVisible; }
    //        set
    //        {
    //            _isVisible = value;
    //            RaisePropertyChanged();
    //        }
    //    }

    //    public override string ToString()
    //    {
    //        string v = this.IsVisible ? "[显示]" : "[隐藏]";
    //        return $"列名：{v} {this.Header}";
    //    }
    //}
}
