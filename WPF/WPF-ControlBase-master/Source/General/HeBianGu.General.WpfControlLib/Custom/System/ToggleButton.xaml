<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Dynamic, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static local:ControlKeys.ToggleButton}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.UncheckedIcon" Value="&#xe81a;" />
        <Setter Property="h:Cattach.CheckedIcon" Value="&#xe81d;" />
        <Setter Property="h:Cattach.UseMouseOverScale" Value="True" />
        <Setter Property="h:Cattach.UseMouseOverOpacity" Value="True" />
        <Setter Property="h:Cattach.UsePressScale" Value="True" />
    </Style>
    
    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Default, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.StyleType" Value="Default" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Single, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Default}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Accent, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Default}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.StyleType" Value="Accent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Clear, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Default}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.StyleType" Value="Clear" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.BrushFIconChecked, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.BrushFIconChecked.RightToLeft, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.DoubleFIconChecked, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.DoubleFIconChecked.Single, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.DoubleFIconChecked}}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.FIconSingle, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Rotate.90, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.CheckedIcon" Value="&#xe63a;" />
        <Setter Property="h:Cattach.UncheckedIcon" Value="&#xe63a;" />
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Small}}" />
        <Setter Property="h:Cattach.IconMargin" Value="0,1,3,1" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="-90" Duration="00:00:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" To="0" Duration="00:00:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Tree, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static local:ControlKeys.ToggleButton}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="13" />
        <Setter Property="Height" Value="13" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="boder"
                            Width="13"
                            Height="13"
                            Background="Transparent">
                        <Border BorderThickness="0" CornerRadius="1" SnapsToDevicePixels="true">
                            <Viewbox>
                                <Path x:Name="ExpandPath"
                                      Margin="1,1,1,1"
                                      Data="M449.386 277.44l250.667 250.773-250.667 250.667z"
                                      Fill="{TemplateBinding Foreground}" />
                            </Viewbox>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Data" Value="M767.893 449.386l-250.773 250.667-250.667-250.667z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.ComboBox, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static local:ControlKeys.ToggleButton}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.CheckedIcon" Value="&#xe9bd;" />
        <Setter Property="h:Cattach.UncheckedIcon" Value="&#xe9bd;" />
        <Setter Property="h:Cattach.UncheckedOpacity" Value="0.6" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Content, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static local:ControlKeys.ToggleButton}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template" Value="{DynamicResource {x:Static h:ControlTemplateKeys.ContentControlIcon}}" />
    </Style>
</ResourceDictionary>