<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Dynamic, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ControlKeys.ButtonBase}}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="h:Cattach.ItemPadding" Value="0" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_10_0}}" />
        <Setter Property="Margin" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_2_0}}" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="h:Cattach.GuideTitle" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content}" />
        <Setter Property="h:Cattach.MouseOverBorderThickness" Value="0" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Default, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Dynamic}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.StyleType" Value="Default" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Label, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Dynamic}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
        <Setter Property="h:Cattach.GuideTitle" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.Title)}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Single, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Default}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />
        <Setter Property="h:Cattach.PressBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.IconMargin" Value="0" />
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Single.Label, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Single}}" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="h:Cattach.TitleBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
        <Setter Property="h:Cattach.GuideTitle" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.Title)}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Accent, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Default}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.StyleType" Value="Accent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Accent.Label, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Accent}}" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="h:Cattach.TitleBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Transparent, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Default}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="Transparent" />
        <Setter Property="h:Cattach.PressBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{x:Null}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundAssist}}" />
        <Setter Property="h:Cattach.UseBackground" Value="False" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="h:Cattach.UseMouseOverScale" Value="True" />
        <Setter Property="h:Cattach.UseMouseOverOpacity" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Icon, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Transparent}}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{x:Null}" />
        <Setter Property="h:Cattach.PressBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{x:Null}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundAssist}}" />
        <Setter Property="h:Cattach.UseBackground" Value="False" />
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="TextBlock.Text" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.Icon)}" />
        <Setter Property="Template" Value="{DynamicResource {x:Static local:ControlTemplateKeys.ControlIconBackground}}" />
        <Setter Property="h:Cattach.Icon" Value="{x:Static h:Icons.Edit}" />
        <Setter Property="h:Cattach.UseMouseOverScale" Value="True" />
        <Setter Property="h:Cattach.UseMouseOverOpacity" Value="True" />
        <Setter Property="h:Cattach.UsePressScale" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Transparent.AccentBack, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.WhiteOpactiy2}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Link, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Transparent}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Text" Value="请输入文本" />
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock Foreground="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" Text="{Binding RelativeSource={RelativeSource AncestorType=ButtonBase}, Path=(h:Cattach.Text)}" TextDecorations="UnderLine" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Circle, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="h:Cattach.CornerRadius" Value="200" />
        <Setter Property="h:Cattach.IconSize" Value="20" />
        <Setter Property="h:Cattach.IconMargin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Circle.Transparent, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Circle}}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
        <Setter Property="h:Cattach.PressBackground" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity5}}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Transparent.BorderBrush, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Transparent}}" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="h:Cattach.MouseOverBorderThickness" Value="2" />
        <Setter Property="h:Cattach.PressBorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushTitle}}" />
        <Setter Property="h:Cattach.PressBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushAssist}}" />
    </Style>

    <ControlTemplate x:Key="S.Button.Template.MouseOverIcon" TargetType="{x:Type ButtonBase}">
        <Grid>
            <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}"
                    Opacity="{TemplateBinding Opacity}" />
            <Grid x:Name="grid">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />

                <TextBlock x:Name="icon"
                           Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconMargin)}"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconSize)}"
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           RenderTransformOrigin="0.5,0.5"
                           Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.Icon)}">
                    <TextBlock.RenderTransform>
                        <RotateTransform x:Name="transIcon" Angle="0" />
                    </TextBlock.RenderTransform>
                </TextBlock>

            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.7" />
                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             To="1.2"
                                             Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             To="1.2"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.7" />
                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             To="1"
                                             Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             To="1"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="h:Cattach.AllowsAnimation" Value="true" />
                </MultiTrigger.Conditions>

                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetName="transIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="180"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetName="transIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <Trigger Property="IsPressed" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.MouseOver, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Dynamic}}" TargetType="{x:Type Button}">
        <Setter Property="Template" Value="{StaticResource S.Button.Template.MouseOverIcon}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" />
        <Setter Property="Opacity" Value="0.5" />
        <Setter Property="h:Cattach.CornerRadius" Value="200" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Close, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="h:Cattach.Icon" Value="&#xe6f4;" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="True" />
        <Setter Property="h:Cattach.CornerRadius" Value="200" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Close.Flag, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="MinHeight" Value="5" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.Icon" Value="&#xe6f4;" />
        <Setter Property="h:Cattach.IconSize" Value="8" />
        <Setter Property="h:Cattach.IconMargin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="-2,2" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="True" />
        <Setter Property="h:Cattach.CornerRadius" Value="200" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Opacity="0.6" Color="Red" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{DynamicResource {x:Static local:ControlTemplateKeys.ControlIconBackground}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Window.Minimize, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Close}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe61d;" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="False" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Command" Value="{Binding Path=MinimizeWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="Visibility" Value="{Binding Path=MinboxEnable, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />
        <Setter Property="Foreground" Value="{Binding Path=CaptionForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{Binding Path=CaptionForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="h:Cattach.PressForeground" Value="{Binding Path=CaptionForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />

        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="h:Cattach.GuideTitle" Value="最小化" />
        <Setter Property="h:Cattach.UseGuide" Value="True" />
        <Setter Property="h:Cattach.GuideData" Value="最小化窗口" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Window.Maximize, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MinimizeWindow}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe665;" />
        <Setter Property="Command" Value="{Binding Path=MaximizeWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Window.Restore, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MinimizeWindow}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe615;" />
        <Setter Property="Command" Value="{Binding Path=MaximizeWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="h:Cattach.GuideTitle" Value="全局配置功能" />
        <Setter Property="h:Cattach.UseGuide" Value="True" />
        <Setter Property="h:Cattach.GuideData" Value="点击显示全局中添加的配置信息" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Window.Hide, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MinimizeWindow}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe820;" />
        <Setter Property="h:Cattach.IconSize" Value="20" />
        <Setter Property="Command" Value="{Binding Path=NotifyWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="ToolTip" Value="隐藏" />
        <Setter Property="h:Cattach.GuideTitle" Value="窗口隐藏功能" />
        <Setter Property="h:Cattach.UseGuide" Value="True" />
        <Setter Property="h:Cattach.GuideData" Value="点击可以隐藏当前窗口到最小托盘" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Window.Close, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Close}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="Command" Value="{Binding Path=CloseWindowCommand, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="Foreground" Value="{Binding Path=CaptionForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="h:Cattach.GuideTitle" Value="退出程序" />
        <Setter Property="h:Cattach.UseGuide" Value="True" />
        <Setter Property="h:Cattach.GuideData" Value="点击后程序退出" />
        <Setter Property="IsCancel" Value="True" />
        <Setter Property="Template" Value="{DynamicResource {x:Static local:ControlTemplateKeys.ControlIconBackground}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Clear, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="True" />
        <Setter Property="h:Cattach.Icon" Value="&#xe701;" />
        <Setter Property="h:Cattach.IconSize" Value="18" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Add.Transparent, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe6e0;" />
        <Setter Property="h:Cattach.IconSize" Value="15" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="False" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Add.Border, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe6e0;" />
        <Setter Property="h:Cattach.IconSize" Value="15" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Delete, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Default}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe618;" />
        <Setter Property="Content" Value="删除" />
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Opacity="0.1" Color="{Binding Source={StaticResource {x:Static h:BrushKeys.Red}}, Path=Color}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
        <Setter Property="h:Cattach.MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Opacity="0.15" Color="{Binding Source={StaticResource {x:Static h:BrushKeys.Red}}, Path=Color}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.StyleType)}" Value="Accent">
                <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                <Setter Property="h:Cattach.MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.8" Color="{Binding Source={StaticResource {x:Static h:BrushKeys.Red}}, Path=Color}" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Edit, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Default}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe7f3;" />
        <Setter Property="Content" Value="编辑" />

        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Opacity="0.1" Color="{Binding Source={StaticResource {x:Static h:BrushKeys.Green}}, Path=Color}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.Green}}" />
        <Setter Property="h:Cattach.MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Opacity="0.15" Color="{Binding Source={StaticResource {x:Static h:BrushKeys.Green}}, Path=Color}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.StyleType)}" Value="Accent">
                <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                <Setter Property="h:Cattach.MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.8" Color="{Binding Source={StaticResource {x:Static h:BrushKeys.Green}}, Path=Color}" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Detial, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Default}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe741;" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Dark0_8}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Opacity="0.8" Color="{Binding Source={StaticResource {x:Static h:BrushKeys.Dark1}}, Path=Color}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Content" Value="详情" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Add, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Dynamic}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xeaf3;" />
        <Setter Property="Content" Value="添加" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Set, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Dynamic}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xeaf3;" />
        <Setter Property="Content" Value="设置" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Close.MouseOver, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MouseOver}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe6f4;" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="True" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Close.Transparent, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe6f4;" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Left, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MouseOver}}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="20,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="h:Cattach.Icon" Value="&#xe9be;" />
        <Setter Property="Command" Value="{x:Static h:Commander.Prev}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Right, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MouseOver}}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="20,0" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="h:Cattach.Icon" Value="&#xe9bf;" />
        <Setter Property="Command" Value="{x:Static h:Commander.Next}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Start, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MouseOver}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe749;" />
        <Setter Property="h:Cattach.IconSize" Value="22" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Stop, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.MouseOver}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe884;" />
        <Setter Property="h:Cattach.IconSize" Value="22" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Vertical.ToolBar, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Transparent}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Orientation" Value="Vertical" />
        <Setter Property="Padding" Value="5,10" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="h:Cattach.IconSize" Value="22" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Transparent.Set, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Transparent}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.IconSize" Value="18" />
        <Setter Property="h:Cattach.Icon" Value="&#xe88e;" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Add.Circle, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe856;" />
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Delete.Circle, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe855;" />
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Sumit.Circle, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe858;" />
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.Button.Close.Circle, TypeInTargetAssembly={x:Type local:ButtonKeys}}" BasedOn="{StaticResource {x:Static local:ButtonKeys.Icon}}" TargetType="{x:Type Button}">
        <Setter Property="h:Cattach.Icon" Value="&#xe857;" />
    </Style>
</ResourceDictionary>
