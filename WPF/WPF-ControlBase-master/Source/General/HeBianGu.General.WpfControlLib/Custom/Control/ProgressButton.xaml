<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/System/Button.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{ComponentResourceKey ResourceId=S.ProgressButton.Default, TypeInTargetAssembly={x:Type local:ProgressButton}}" BasedOn="{StaticResource {x:Static h:ButtonKeys.Dynamic}}" TargetType="{x:Type local:ProgressButton}">
        <Setter Property="Message" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Content}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ProgressButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <ContentControl x:Name="Label"
                                        Background="{TemplateBinding BorderBrush}"
                                        Content="{TemplateBinding h:Cattach.Title}"
                                        IsHitTestVisible="False"
                                        IsTabStop="False"
                                        Template="{TemplateBinding h:Cattach.TitleTemplate}" />

                        <Grid Grid.Column="1">
                            <Border x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}" />

                            <Border x:Name="boder_mouseover"
                                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBorderBrush)}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                    Opacity="0" />

                            <Grid x:Name="grid" Margin="{TemplateBinding Padding}" RenderTransformOrigin="0.5,0.5">
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <StackPanel Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.ItemPadding)}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="Center"
                                            Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.Orientation)}">

                                    <TextBlock x:Name="icon"
                                               Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconMargin)}"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconSize)}"
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                                               RenderTransformOrigin="0.5,0.5"
                                               Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.Icon)}">
                                        <TextBlock.RenderTransform>
                                            <RotateTransform x:Name="transIcon" Angle="0" />
                                        </TextBlock.RenderTransform>
                                    </TextBlock>

                                    <!--<Label x:Name="txt"
                                           VerticalAlignment="Center"
                                           Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                           ContentTemplate="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentTemplate}"
                                           FontSize="{TemplateBinding FontSize}"
                                           Foreground="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"
                                           Style="{x:Null}" />-->

                                    <ContentPresenter x:Name="txt" VerticalAlignment="Center"/>

                                </StackPanel>
                            </Grid>

                            <ProgressBar Height="Auto"
                                         Background="Transparent"
                                         BorderThickness="0"
                                         Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                                         IsIndeterminate="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsIndeterminate}"
                                         Maximum="1.0"
                                         Minimum="0.0"
                                         Opacity="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressOpacity}"
                                         Style="{x:Null}"
                                         Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsBusy, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}"
                                         Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Percent}" />

                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                                        <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                                        <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="h:Cattach.AllowsAnimation" Value="true" />
                            </MultiTrigger.Conditions>

                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                                        <DoubleAnimation Storyboard.TargetName="transIcon"
                                                         Storyboard.TargetProperty="Angle"
                                                         To="180"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                                        <DoubleAnimation Storyboard.TargetName="transIcon"
                                                         Storyboard.TargetProperty="Angle"
                                                         To="0"
                                                         Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.PressBorderBrush)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.PressForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsBusy" Value="true">
                            <Setter TargetName="txt" Property="Content" Value="{Binding Path=Message, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="IsEnabled" Value="False" />
                        </Trigger>

                        <Trigger Property="Content" Value="">
                            <Setter TargetName="txt" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="txt" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ProgressButton.Command, TypeInTargetAssembly={x:Type local:ProgressButton}}" BasedOn="{StaticResource {x:Static h:ProgressButton.DefaultKey}}" TargetType="{x:Type local:ProgressButton}">
        <Setter Property="IsBusy" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Command.IsBusy}" />
        <Setter Property="Percent" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Command.Percent}" />
        <Setter Property="IsIndeterminate" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Command.IsIndeterminate}" />
        <Setter Property="Message" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Command.Message}" />
        <Setter Property="IsEnabled" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Command.IsEnabled}" />
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Command.IsVisible, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:ProgressButton.CommandKey}}" TargetType="{x:Type local:ProgressButton}" />
</ResourceDictionary>
