<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Control.Drawer">

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Default, TypeInTargetAssembly={x:Type local:Drawer}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="ClipToBounds" Value="False" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="h:Cattach.IconMargin" Value="0" />
        <Setter Property="h:Cattach.Icon" Value="&#xe71b;" />
        <Setter Property="h:TransitionService.VisibleActions">
            <Setter.Value>
                <h:TransitionCollection>
                    <h:OpacityTransition />
                </h:TransitionCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="HorizontalOpenContentAlignment" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=HorizontalContentAlignment}" />
        <Setter Property="VerticalOpenContentAlignment" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=VerticalContentAlignment}" />
        <Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Button Margin="5"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="&#xe71b;"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" />-->

                    <Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                            HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                            VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                            h:Cattach.Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                            Command="{x:Static h:Commander.Open}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Button Margin="5"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalContentAlignment}"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />-->

                    <Button HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                            VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                            Command="{x:Static h:Commander.Close}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Drawer}">
                    <Grid>
                        <Grid x:Name="PART_Center"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              h:TransitionService.VisibleActions="{TemplateBinding h:TransitionService.VisibleActions}">

                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />

                            <GroupBox Margin="{TemplateBinding Padding}"
                                      Padding="{TemplateBinding Padding}"
                                      h:ShadowAssist.ShadowDepth="{DynamicResource {x:Static h:EffectShadowKeys.Default2}}"
                                      Background="{TemplateBinding Background}"
                                      Header="{TemplateBinding Header}"
                                      Style="{TemplateBinding GroupStyle}">
                                <ContentPresenter />
                            </GroupBox>
                        </Grid>

                        <Grid x:Name="PART_Show" h:TransitionService.IsVisible="True" h:TransitionService.VisibleActions="{TemplateBinding h:TransitionService.VisibleActions}">
                            <ContentControl Template="{TemplateBinding OpenContent}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--<Setter Property="h:Cattach.Behaviors">
            <Setter.Value>
                <h:Behaviors>
                    <h:LoadedAdornerBehavior AdornerType="{x:Type h:WaterMarkAdorner}" />
                </h:Behaviors>
            </Setter.Value>
        </Setter>-->

        <Setter Property="GroupStyle" Value="{DynamicResource {x:Static h:GroupBoxKeys.Close}}" />

        <Setter Property="Content">
            <Setter.Value>
                <ListBox Width="200"
                         Margin="40"
                         HorizontalAlignment="Stretch"
                         VerticalAlignment="Center">
                    <TextBox h:Cattach.IsUseHistory="False" />
                    <TextBox />
                </ListBox>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Single, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="GroupStyle" Value="{DynamicResource {x:Static h:GroupBoxKeys.CloseSingle}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Clear, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Drawer}">
                    <Grid> 
                        <Grid x:Name="PART_Center"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              h:TransitionService.VisibleActions="{TemplateBinding h:TransitionService.VisibleActions}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
 
                            <ContentPresenter /> 
                            <ContentControl Template="{TemplateBinding CloseContent}" />
                        </Grid>

                        <Grid x:Name="PART_Show" h:TransitionService.VisibleActions="{TemplateBinding h:TransitionService.VisibleActions}">
                            <ContentControl Template="{TemplateBinding OpenContent}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <!--<Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="5"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="&#xe71b;"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" />
                </ControlTemplate>

        -->
        <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" HorizontalAlignment="Right" Icon="&#xe69f;"
                            >
                    <h:Interaction.Triggers>
                        <h:EventTrigger EventName="MouseEnter">
                            <h:InvokeCommandAction Command="{x:Static h:Commander.ActionVisibleCommand}"
                               CommandParameter="{Binding ElementName=grid_center}"/>
                        </h:EventTrigger>
                    </h:Interaction.Triggers>
                </Button>-->
        <!--
            </Setter.Value>
        </Setter>

        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="5"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalContentAlignment}"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Geomotry.Default, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="h:TransitionService.VisibleActions">
            <Setter.Value>
                <h:TransitionCollection>
                    <h:ScaleGeomotryTransition PointOriginType="MousePosition" />
                </h:TransitionCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="UseShowAction" Value="False" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Center.Default, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Center" />
        <Setter Property="VerticalOpenContentAlignment" Value="Center" />
        <Setter Property="ClipToBounds" Value="False" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Right.Default, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Right" />
        <Setter Property="VerticalOpenContentAlignment" Value="Center" />
        <!--<Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />
                </ControlTemplate>

        -->
        <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" HorizontalAlignment="Right" Icon="&#xe69f;"
                            >
                    <h:Interaction.Triggers>
                        <h:EventTrigger EventName="MouseEnter">
                            <h:InvokeCommandAction Command="{x:Static h:Commander.ActionVisibleCommand}"
                               CommandParameter="{Binding ElementName=grid_center}"/>
                        </h:EventTrigger>
                    </h:Interaction.Triggers>
                </Button>-->
        <!--
            </Setter.Value>
        </Setter>
        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="0,0,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Right.Single, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.SingleKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Right" />
        <Setter Property="VerticalOpenContentAlignment" Value="Center" />
        <!--<Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />
                </ControlTemplate>

        -->
        <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" HorizontalAlignment="Right" Icon="&#xe69f;"
                            >
                    <h:Interaction.Triggers>
                        <h:EventTrigger EventName="MouseEnter">
                            <h:InvokeCommandAction Command="{x:Static h:Commander.ActionVisibleCommand}"
                               CommandParameter="{Binding ElementName=grid_center}"/>
                        </h:EventTrigger>
                    </h:Interaction.Triggers>
                </Button>-->
        <!--
            </Setter.Value>
        </Setter>
        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="0,0,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Right.Clear, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.ClearKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Right" />
        <Setter Property="VerticalOpenContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Left.Default, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Left" />
        <Setter Property="VerticalOpenContentAlignment" Value="Center" />
        <!--<Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
        -->
        <!--<Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"/>-->

        <!--<Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />-->
        <!--

                    <Button HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                            VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                            h:Cattach.Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                            Command="{x:Static h:Commander.Open}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
        -->
        <!--<Button HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />-->
        <!--

                    <Button HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                            VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                            Command="{x:Static h:Commander.Close}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Left.Single, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.SingleKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Left" />
        <Setter Property="VerticalOpenContentAlignment" Value="Center" />
        <!--<Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />
                </ControlTemplate>

        -->
        <!--<Button Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" HorizontalAlignment="Right" Icon="&#xe69f;"
                            >
                    <h:Interaction.Triggers>
                        <h:EventTrigger EventName="MouseEnter">
                            <h:InvokeCommandAction Command="{x:Static h:Commander.ActionVisibleCommand}"
                               CommandParameter="{Binding ElementName=grid_center}"/>
                        </h:EventTrigger>
                    </h:Interaction.Triggers>
                </Button>-->
        <!--
            </Setter.Value>
        </Setter>
        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="0,0,0,0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Left.Clear, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.ClearKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Left" />
        <Setter Property="VerticalOpenContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Bottom.Default, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Center" />
        <Setter Property="VerticalOpenContentAlignment" Value="Bottom" />
        <!--<Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button HorizontalAlignment="Center"
                               VerticalAlignment="Top"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Drawer.Top.Default, TypeInTargetAssembly={x:Type local:Drawer}}" BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalOpenContentAlignment" Value="Center" />
        <Setter Property="VerticalOpenContentAlignment" Value="Top" />
        <!--<Setter Property="OpenContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Margin="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.IconMargin)}"
                               HorizontalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=HorizontalOpenContentAlignment}"
                               VerticalAlignment="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=VerticalOpenContentAlignment}"
                               Command="{x:Static h:Commander.Open}"
                               Icon="{Binding RelativeSource={RelativeSource AncestorType=local:Drawer}, Path=(h:Cattach.Icon)}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.MouseOver}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="CloseContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button HorizontalAlignment="Center"
                               VerticalAlignment="Bottom"
                               Command="{x:Static h:Commander.Close}"
                               Style="{DynamicResource {x:Static h:ButtonKeys.Close}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:Drawer.DefaultKey}}" TargetType="{x:Type local:Drawer}" />
</ResourceDictionary>
