// Copyright © 2022 By HeBianGu(QQ:908293466) https://github.com/HeBianGu/WPF-ControlBase

using HeBianGu.Base.WpfBase;
using HeBianGu.General.WpfControlLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;

namespace HeBianGu.Control.PagedDataGrid
{
    public partial class AutoColumnPagedDataGrid : PagedDataGrid
    {
        public static new ComponentResourceKey DefaultKey => new ComponentResourceKey(typeof(AutoColumnPagedDataGrid), "S.AutoColumnPagedDataGrid.Default");
        public static ComponentResourceKey SumitKey => new ComponentResourceKey(typeof(AutoColumnPagedDataGrid), "S.AutoColumnPagedDataGrid.Sumit");
        public static ComponentResourceKey DialogKey => new ComponentResourceKey(typeof(AutoColumnPagedDataGrid), "S.AutoColumnPagedDataGrid.Dialog");

        public Type ModelType
        {
            get { return (Type)GetValue(ModelTypeProperty); }
            set { SetValue(ModelTypeProperty, value); }
        }

        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ModelTypeProperty =
            DependencyProperty.Register("ModelType", typeof(Type), typeof(AutoColumnPagedDataGrid), new FrameworkPropertyMetadata(default(Type), (d, e) =>
            {
                AutoColumnPagedDataGrid control = d as AutoColumnPagedDataGrid;

                if (control == null) return;

                if (e.OldValue is Type o)
                {

                }

                if (e.NewValue is Type n)
                {

                }

                control.GenerateColunms();
            }));



        public string BindingPath
        {
            get { return (string)GetValue(BindingPathProperty); }
            set { SetValue(BindingPathProperty, value); }
        }

        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty BindingPathProperty =
            DependencyProperty.Register("BindingPath", typeof(string), typeof(AutoColumnPagedDataGrid), new FrameworkPropertyMetadata("{0}", (d, e) =>
            {
                AutoColumnPagedDataGrid control = d as AutoColumnPagedDataGrid;

                if (control == null) return;

                if (e.OldValue is string o)
                {

                }

                if (e.NewValue is string n)
                {

                }

                control.GenerateColunms();
            }));
        public ObservableCollection<DataGridColumn> HomeColumns { get; } = new ObservableCollection<DataGridColumn>();

        protected override void OnInitialized(EventArgs e)
        {
            base.OnInitialized(e);

            if (this.ModelType == null)
            {
                var genricType = this.DataSource?.GetGenericArgumentType();
                var p = genricType?.GetProperty(this.BindingPath.Split('.')[0]);
                this.ModelType = p == null ? this.DataSource.GetGenericArgumentType() : p.PropertyType;
            }

            this.GenerateColunms();
        }

        protected override void OnDataSourceChanged()
        {
            base.OnDataSourceChanged();
        }

        protected override void OnAutoGeneratedColumns(EventArgs e)
        {
            //base.OnAutoGeneratedColumns(e);
        }

        protected override void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e)
        {
            //base.OnAutoGeneratingColumn(e);
        }

        protected virtual void GenerateColunms()
        {
            if (this.IsInitialized == false)
                return;
            this.Columns.Clear();
            foreach (DataGridColumn item in this.HomeColumns)
            {
                this.Columns.Add(item);
            }
            if (this.ModelType == null)
                return;
            PropertyInfo[] ps = this.ModelType.GetProperties();
            foreach (PropertyInfo p in ps)
            {
                BrowsableAttribute browsable = p.GetCustomAttribute<BrowsableAttribute>();
                if (browsable?.Browsable == false)
                    continue;
                DisplayAttribute display = p.GetCustomAttribute<DisplayAttribute>();
                ReadOnlyAttribute readOnly = p.GetCustomAttribute<ReadOnlyAttribute>();
                DataGridColumnAttribute columnAttribute = p.GetCustomAttribute<DataGridColumnAttribute>();
                DataGridColumn column = columnAttribute == null ? this.GetDataGridColumn(p)
                    : columnAttribute.GetDataGridColumn(p);
                column.Header = display?.Name ?? p.Name;
                if (column is DataGridBoundColumn bound)
                {
                    Binding binding = new Binding();
                    string path = string.Format(this.BindingPath, string.Format(columnAttribute?.PropertyPath ?? "{0}", p.Name));
                    binding.Path = new PropertyPath(path);
                    binding.Mode = readOnly?.IsReadOnly == true ? BindingMode.OneWay : BindingMode.TwoWay;
                    bound.Binding = binding;
                }
                this.Columns.Add(column);
            }
            foreach (DataGridColumn item in this.EndColumns)
            {
                this.Columns.Add(item);
            }

        }

        public DataGridLength DataGridLength
        {
            get { return (DataGridLength)GetValue(DataGridLengthProperty); }
            set { SetValue(DataGridLengthProperty, value); }
        }

        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty DataGridLengthProperty =
            DependencyProperty.Register("DataGridLength", typeof(DataGridLength), typeof(AutoColumnPagedDataGrid), new FrameworkPropertyMetadata(DataGridLength.Auto, (d, e) =>
            {
                AutoColumnPagedDataGrid control = d as AutoColumnPagedDataGrid;

                if (control == null) return;

                if (e.OldValue is DataGridLength o)
                {

                }

                if (e.NewValue is DataGridLength n)
                {

                }

            }));

        protected override void OnMouseDoubleClick(MouseButtonEventArgs e)
        {
            if (!this.UseDoubleClickShowView)
                return;

            if (this.SelectedItem == null)
                return;

            var row = this.ItemContainerGenerator.ContainerFromItem(this.SelectedItem) as DataGridRow;

            if (row?.IsMouseOver != true)
                return;
            if (this.BindingPath.Contains('.'))
            {
                var p = this.SelectedItem.GetType().GetProperty(this.BindingPath.Split('.')[0]);
                var value = p.GetValue(this.SelectedItem);
                MessageProxy.PropertyGrid.ShowView(value);
            }
            else
            {
                MessageProxy.PropertyGrid.ShowView(this.SelectedItem);

            }
        }


        public DataGridColumn GetDataGridColumn(PropertyInfo propertyInfo)
        {
            if (propertyInfo.PropertyType == typeof(bool))
            {
                return new CheckBoxDataGridColumn() { Width = this.DataGridLength };
            }
            else if (propertyInfo.PropertyType.IsEnum)
            {
                return new DataGridComboBoxColumn() { Width = this.DataGridLength };
            }
            else
            {
                return new DataGridTextColumn() { Width = this.DataGridLength };
            }
        }
    }

    public partial class AutoColumnPagedDataGrid
    {
        public AutoColumnPagedDataGrid()
        {
            {
                CommandBinding binding = new CommandBinding(Commander.Sure);
                binding.Executed += (l, k) =>
                {
                    this.Result = true;
                    this.OnSumit();
                };
            }

            {
                CommandBinding binding = new CommandBinding(Commander.Close);
                binding.Executed += (l, k) =>
                {
                    this.OnClose();
                };
            }
        }

        public string Title
        {
            get { return (string)GetValue(TitleProperty); }
            set { SetValue(TitleProperty, value); }
        }

        // Using a DependencyProperty as the backing store for MyProperty.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TitleProperty =
            DependencyProperty.Register("Title", typeof(string), typeof(AutoColumnPagedDataGrid), new FrameworkPropertyMetadata(default(string), (d, e) =>
            {
                AutoColumnPagedDataGrid control = d as AutoColumnPagedDataGrid;

                if (control == null) return;

                if (e.OldValue is string o)
                {

                }

                if (e.NewValue is string n)
                {

                }

            }));


        public bool Result { get; set; }


        //声明和注册路由事件
        public static readonly RoutedEvent SumitRoutedEvent =
            EventManager.RegisterRoutedEvent("Sumit", RoutingStrategy.Bubble, typeof(EventHandler<RoutedEventArgs>), typeof(AutoColumnPagedDataGrid));
        //CLR事件包装
        public event RoutedEventHandler Sumit
        {
            add { this.AddHandler(SumitRoutedEvent, value); }
            remove { this.RemoveHandler(SumitRoutedEvent, value); }
        }

        //激发路由事件,借用Click事件的激发方法

        protected void OnSumit()
        {
            RoutedEventArgs args = new RoutedEventArgs(SumitRoutedEvent, this);
            this.RaiseEvent(args);
        }


        //声明和注册路由事件
        public static readonly RoutedEvent CloseRoutedEvent =
            EventManager.RegisterRoutedEvent("Close", RoutingStrategy.Bubble, typeof(EventHandler<RoutedEventArgs>), typeof(AutoColumnPagedDataGrid));
        //CLR事件包装
        public event RoutedEventHandler Close
        {
            add { this.AddHandler(CloseRoutedEvent, value); }
            remove { this.RemoveHandler(CloseRoutedEvent, value); }
        }

        //激发路由事件,借用Click事件的激发方法

        protected void OnClose()
        {
            RoutedEventArgs args = new RoutedEventArgs(CloseRoutedEvent, this);
            this.RaiseEvent(args);
        }

        private static ManualResetEvent _asyncShowWaitHandle = new ManualResetEvent(false);

        /// <summary> 显示蒙版 </summary>
        public static async Task<bool> ShowSource<T>(T value, Predicate<T> match = null, string title = null, Action<DataGrid> builder = null, ComponentResourceKey key = null, int layerIndex = 0) where T : IList
        {
            bool result = false;

            await Application.Current.Dispatcher.Invoke(async () =>
            {
                if (Application.Current.MainWindow is IMainWindow window)
                {
                    AutoColumnPagedDataGrid form = new AutoColumnPagedDataGrid();
                    form.Title = title;
                    form.Style = Application.Current.FindResource(key ?? AutoColumnPagedDataGrid.DialogKey) as Style;
                    form.DataSource = value;
                    builder?.Invoke(form);
                    form.Close += (l, k) =>
                    {
                        MessageProxy.Container.Close();
                        _asyncShowWaitHandle.Set();
                        result = false;
                    };

                    form.Sumit += (l, k) =>
                    {
                        if (form.DataSource is IEnumerable<object> objs)
                        {
                            List<string> errors = null;

                            if (!objs.Any(o => o.ModelState(out errors)))
                            {
                                MessageProxy.Snacker.ShowTime(errors?.FirstOrDefault());
                                return;
                            }
                        }
                        if (match != null && !match(value))
                        {
                            return;
                        }
                        MessageProxy.Container.Close();
                        _asyncShowWaitHandle.Set();
                        result = true;

                    };

                    window.ShowContainer(form);
                    _asyncShowWaitHandle.Reset();
                    Task task = new Task(() =>
                    {
                        _asyncShowWaitHandle.WaitOne();
                    });

                    task.Start();

                    await task;
                }
            });

            return result;

        }

    }
}
