<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:collections="clr-namespace:System.Collections;assembly=mscorlib"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Control.ToggleExpander"
                    xmlns:net="clr-namespace:System.Net.NetworkInformation;assembly=System">


    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleExpander.Default, TypeInTargetAssembly={x:Type local:ToggleExpander}}" TargetType="{x:Type local:ToggleExpander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="h:Cattach.IconSize" Value="60" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <!--<Setter Property="Visibility" Value="Collapsed"/>-->
                    <Setter Property="RenderTransform" Value="{DynamicResource {x:Static h:SystemKeys.TransformGroup}}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <ContentPresenter />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                IsItemsHost="True"
                                Orientation="Vertical" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <Border Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ToggleButton x:Name="tg" Height="Auto"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          h:Cattach.Icon="&#xe635;"
                                          h:Cattach.IconSize="{TemplateBinding h:Cattach.IconSize}"
                                          h:InvokeTimeSplitAnimationAction.IsExcept="True"
                                          Content="&#xe639;"
                                          Style="{DynamicResource {x:Static h:ToggleButtonKeys.DoubleFIconChecked}}">
                                <!--  h:InvokeTimeSplitAnimationAction.IsExcept="True"  -->
                                <!--<h:Interaction.Triggers>
                                    <h:EventTrigger EventName="MouseEnter">
                                        <h:ChangePropertyAction PropertyName="IsChecked" Value="true"/>
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>-->
                            </ToggleButton>

                            <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True"
                                   IsOpen="{Binding ElementName=tg, Path=IsChecked}"
                                   Placement="Bottom"
                                   PlacementTarget="{Binding ElementName=tg}"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                   StaysOpen="True"
                                   VerticalOffset="2">

                                <Grid>
                                    <Border Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />

                                    <!--<Polygon  HorizontalAlignment="Left" Fill="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                              Stroke="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                              Points="0,5 5,0 10,5 0,5"
                                              Margin="0,-5,8,0" FillRule="Nonzero"/>-->

                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleExpander.Single, TypeInTargetAssembly={x:Type local:ToggleExpander}}" BasedOn="{StaticResource {x:Static h:ToggleExpander.DefaultKey}}" TargetType="{x:Type local:ToggleExpander}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.CornerRadius" Value="28" />
        <Setter Property="h:Cattach.IconSize" Value="40" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleExpander}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding h:Cattach.CornerRadius}">
                        <DockPanel HorizontalAlignment="Left" VerticalAlignment="Center">
                            <ToggleButton x:Name="tg"
                                          Margin="5,0" Height="Auto"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          h:Cattach.Icon="&#xe635;"
                                          h:Cattach.IconSize="{TemplateBinding h:Cattach.IconSize}"
                                          h:InvokeTimeSplitAnimationAction.IsExcept="True"
                                          Content="&#xe639;"
                                          DockPanel.Dock="{TemplateBinding DockPanel.Dock}"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{TemplateBinding IsExpanded}"
                                          Style="{DynamicResource {x:Static h:ToggleButtonKeys.DoubleFIconChecked}}">
                                <h:Interaction.Triggers>
                                    <h:EventTrigger EventName="Checked">
                                        <h:InvokeCommandAction Command="{x:Static h:AnimationCommander.VisibleSplitAnimationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    </h:EventTrigger>

                                    <h:EventTrigger EventName="Unchecked">
                                        <h:InvokeCommandAction Command="{x:Static h:AnimationCommander.CollapsedSplitAnimationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    </h:EventTrigger>

                                </h:Interaction.Triggers>
                            </ToggleButton>

                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="tg" Property="IsChecked" Value="true" />
                            <Setter Property="Cursor" Value="ScrollAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="S.ToggleExpander.Center" TargetType="{x:Type local:ToggleExpander}" BasedOn="{StaticResource {x:Static h:TreeListView.SingleKey}}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="h:Cattach.IconSize" Value="50"/>
        <Setter Property="h:Cattach.CornerRadius" Value="250"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ToggleExpander">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}">
                        <Grid>
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>

    -->
    <!--  h:InvokeTimeSplitAnimationAction.IsExcept="True"  -->
    <!--
                            <ToggleButton x:Name="tg" HorizontalAlignment="Center" VerticalAlignment="Center"
                                          DockPanel.Dock="{TemplateBinding DockPanel.Dock}"
                                          Content="&#xe639;" h:Cattach.Icon="&#xe635;"
                                          IsChecked="{TemplateBinding IsExpanded}"
                                          h:Cattach.IconSize="{TemplateBinding h:Cattach.IconSize}"
                                          Style="{DynamicResource {x:Static h:ToggleButtonKeys.DoubleFIconChecked}}">
                                <h:Interaction.Triggers>
                                    <h:EventTrigger EventName="Checked">
                                        <h:InvokeCommandAction Command="{x:Static local:Commander.VisibleSplitAnimationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </h:EventTrigger>

                                    <h:EventTrigger EventName="Unchecked">
                                        <h:InvokeCommandAction Command="{x:Static local:Commander.CollapsedSplitAnimationCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>
                            </ToggleButton>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"  Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="IsChecked"  Value="true" TargetName="tg"/>
                            <Setter Property="Cursor" Value="ScrollAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <local:CirclePanel Len="60" Margin="25" IsAnimation="False"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style BasedOn="{StaticResource {x:Static h:ToggleExpander.DefaultKey}}" TargetType="{x:Type local:ToggleExpander}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.ElementExpander.MouseEnter, TypeInTargetAssembly={x:Type local:ElementExpander}}" BasedOn="{StaticResource {x:Static h:ToggleExpander.SingleKey}}" TargetType="{x:Type local:ElementExpander}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="h:Cattach.IconSize" Value="50" />
        <Setter Property="h:Cattach.CornerRadius" Value="250" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ElementExpander">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding h:Cattach.CornerRadius}">
                        <Grid>
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                            <ContentControl Content="{TemplateBinding Content}" />
                        </Grid>

                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="MouseEnter">
                                <h:InvokeCommandAction Command="{x:Static h:AnimationCommander.VisibleSplitAnimationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            </h:EventTrigger>

                            <h:EventTrigger EventName="MouseLeave">
                                <h:InvokeCommandAction Command="{x:Static h:AnimationCommander.CollapsedSplitAnimationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            </h:EventTrigger>
                        </h:Interaction.Triggers>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <local:CirclePanel Len="60" Margin="25" IsAnimation="False"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

</ResourceDictionary>

