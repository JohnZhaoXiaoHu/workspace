<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Control.PasswordBox"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="S.Password.Template.Default" TargetType="{x:Type local:PasswordBox}">
        <Grid x:Name="PART_Root">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Border Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                    Grid.ColumnSpan="8"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}" />

            <!--<Border x:Name="boder_mouseover"
                        Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                        Grid.ColumnSpan="8"
                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                        BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBorderBrush)}"
                        BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBorderThickness)}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        Opacity="0"
                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />-->

            <!--<Border x:Name="boder"
                        Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                        Grid.ColumnSpan="8"
                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBackground)}"
                        BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBorderBrush)}"
                        BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBorderThickness)}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        Opacity="0"
                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />-->

            <ContentControl Content="{TemplateBinding h:Cattach.Title}" Template="{TemplateBinding h:Cattach.TitleTemplate}" />

            <TextBlock x:Name="ficon"
                       Grid.Column="1"
                       Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconMargin)}"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       FontSize="{TemplateBinding h:Cattach.IconSize}"
                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                       Text="{TemplateBinding h:Cattach.Icon}" />

            <TextBox x:Name="PART_TextBox"
                     Grid.Column="2"
                     Grid.ColumnSpan="3"
                     Height="{TemplateBinding Height}"
                     Margin="{TemplateBinding Padding}"
                     HorizontalAlignment="Stretch"
                     VerticalAlignment="Center"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalContentAlignment="Center"
                     Background="Transparent"
                     BorderBrush="Transparent"
                     BorderThickness="0"
                     CaretBrush="{TemplateBinding CaretBrush}"
                     FontSize="{TemplateBinding FontSize}"
                     Foreground="{TemplateBinding Foreground}"
                     IsTabStop="False"
                     SelectionBrush="{TemplateBinding SelectionBrush}"
                     Style="{StaticResource {x:Type TextBox}}"
                     Text="{TemplateBinding PassWord}"
                     Visibility="{Binding ElementName=toggle, Path=IsChecked, Converter={x:Static h:XConverter.FalseToVisibilityConverter}}" />

            <PasswordBox x:Name="PART_PassWord"
                         Grid.Column="2"
                         Grid.ColumnSpan="3"
                         Margin="{TemplateBinding Padding}"
                         HorizontalAlignment="Stretch"
                         VerticalAlignment="Center"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         VerticalContentAlignment="Center"
                         Background="Transparent"
                         BorderBrush="Transparent"
                         BorderThickness="0"
                         CaretBrush="{TemplateBinding CaretBrush}"
                         FontSize="{TemplateBinding FontSize}"
                         Foreground="{TemplateBinding Foreground}"
                         IsTabStop="False"
                         PasswordChar="{TemplateBinding PasswordChar}"
                         SelectionBrush="{TemplateBinding SelectionBrush}"
                         Style="{StaticResource {x:Type PasswordBox}}"
                         Visibility="{Binding ElementName=toggle, Path=IsChecked, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

            <TextBlock x:Name="Message"
                       Grid.Column="2"
                       Margin="{TemplateBinding Padding}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                       IsHitTestVisible="False"
                       Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                       Text="{TemplateBinding h:Cattach.Watermark}"
                       Visibility="Collapsed" />


            <ToggleButton x:Name="toggle"
                          Grid.Column="3"
                          Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IconMargin)}"
                          h:Cattach.IconSize="{TemplateBinding h:Cattach.IconSize}"
                          Focusable="False"
                          IsChecked="True"
                          Style="{DynamicResource {x:Static h:ToggleButtonKeys.DoubleFIconChecked}}" />


            <ContentControl x:Name="PART_AttachContent"
                            Grid.Column="4"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            VerticalContentAlignment="Top"
                            Template="{TemplateBinding h:Cattach.AttachContent}" />

        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PassWord}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PassWord}" Value="{x:Null}">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <!--<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="toggle" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>

            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="toggle" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Root" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="S.Password.Template.Single" TargetType="{x:Type local:PasswordBox}">
        <Grid x:Name="PART_Root">
            <Grid x:Name="PART_InnerGrid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Border x:Name="Bg"
                        Grid.Column="1"
                        Grid.ColumnSpan="4"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />


                <ContentControl x:Name="Label"
                                Margin="1"
                                Background="{TemplateBinding Foreground}"
                                Content="{TemplateBinding h:Cattach.Title}"
                                Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}"
                                Template="{TemplateBinding h:Cattach.TitleTemplate}" />


                <TextBlock x:Name="ficon"
                           Grid.Column="1"
                           Margin="{TemplateBinding h:Cattach.IconMargin}"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           FontSize="{TemplateBinding h:Cattach.IconSize}"
                           Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                           Text="{TemplateBinding h:Cattach.Icon}" />


                <TextBox x:Name="PART_TextBox"
                         Grid.Column="2"
                         Grid.ColumnSpan="3"
                         Height="{TemplateBinding Height}"
                         Margin="2"
                         HorizontalAlignment="Stretch"
                         VerticalAlignment="Center"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         VerticalContentAlignment="Center"
                         Background="{TemplateBinding Background}"
                         BorderBrush="Transparent"
                         BorderThickness="0"
                         CaretBrush="{TemplateBinding CaretBrush}"
                         FontSize="{TemplateBinding FontSize}"
                         Foreground="{TemplateBinding Foreground}"
                         IsTabStop="False"
                         SelectionBrush="{TemplateBinding SelectionBrush}"
                         Text="{TemplateBinding PassWord}" />


                <PasswordBox x:Name="PART_PassWord"
                             Grid.Column="2"
                             Grid.ColumnSpan="3"
                             Height="{TemplateBinding Height}"
                             Margin="2"
                             HorizontalAlignment="Stretch"
                             VerticalAlignment="Center"
                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                             VerticalContentAlignment="Center"
                             Background="{TemplateBinding Background}"
                             BorderBrush="{TemplateBinding Background}"
                             BorderThickness="0"
                             CaretBrush="{TemplateBinding CaretBrush}"
                             FontSize="{TemplateBinding FontSize}"
                             Foreground="{TemplateBinding Foreground}"
                             IsTabStop="False"
                             PasswordChar="{TemplateBinding PasswordChar}"
                             SelectionBrush="{TemplateBinding SelectionBrush}"
                             Visibility="{Binding ElementName=toggle, Path=IsChecked, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />


                <TextBlock x:Name="Message"
                           Grid.Column="2"
                           Margin="5,2,5,2"
                           Padding="{TemplateBinding Padding}"
                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                           Foreground="{TemplateBinding Foreground}"
                           IsHitTestVisible="False"
                           Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                           Text="{TemplateBinding h:Cattach.Watermark}"
                           Visibility="Collapsed" />


                <ToggleButton x:Name="toggle"
                              Grid.Column="3"
                              Margin="5"
                              Focusable="False"
                              FontSize="15"
                              IsChecked="True"
                              Style="{DynamicResource {x:Static h:ToggleButtonKeys.DoubleFIconChecked}}" />

                <!--</ScrollViewer>-->

                <Border Grid.Column="4" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <ContentControl x:Name="PART_AttachContent"
                                    VerticalAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    Template="{TemplateBinding h:Cattach.AttachContent}" />
                </Border>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:PasswordBox}, Path=PassWord}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:PasswordBox}, Path=PassWord}" Value="{x:Null}">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>


            <!--<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="toggle" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />

            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="toggle" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Root" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Dynamic, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static h:ControlKeys.Dynamic}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="ContextMenu" Value="{DynamicResource TextBoxContextMenu}" />
        <!--<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />-->
        <!--<Setter Property="FontFamily" Value="{DynamicResource {x:Static h:SystemKeys.FontFamily}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="BorderThickness" Value="1" />-->
        <Setter Property="h:Cattach.Icon" Value="&#xe6ed;" />
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Small}}" />
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />-->
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="Padding" Value="0" />

        <!--<Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />-->
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Template" Value="{StaticResource S.Password.Template.Default}" />
        <Setter Property="h:Cattach.IsReadOnly" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsReadOnly}" />
        <Setter Property="h:Cattach.IsMouseOver" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" />
        <Setter Property="h:Cattach.IsKeyboardFocusWithin" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsKeyboardFocusWithin}" />
        <Setter Property="h:Cattach.HasError" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(Validation.HasError)}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Default, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static h:PasswordBox.DynamicKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="h:Cattach.StyleType" Value="Default" />
    </Style>


    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Clear, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.DynamicKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static h:ShareKeys.ClearTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Label, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.DynamicKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static h:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.LabelClear, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.LabelKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static h:ShareKeys.ClearTemplate}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static h:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Single, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.DefaultKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="Template" Value="{StaticResource S.Password.Template.Single}" />
    </Style>


    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Sinple.Label, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.SingleKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="70" Margin="3">
                        <TextBlock HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Sinple.LabelClear, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.LabelSingleKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Button Icon="&#xe6f4;" AllowsAnimation="True"
                                   Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}"
                                   IsTabStop="False"
                                   IconMargin="0"
                                   h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                                   Command="h:Cattach.ClearTextCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type PasswordBox}}}"
                                   Margin="0,3,1,4"
                                   IconSize="14"
                                   Foreground="{TemplateBinding Foreground}"
                                   Cursor="Arrow"/>-->

                    <Button Margin="0,0,-10,0"
                            h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                            Command="h:Cattach.ClearTextCommand"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PasswordBox}}}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.Clear}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Show, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.DefaultKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Width="60" Background="{DynamicResource {x:Static h:BrushKeys.Accent}}">
                        <TextBlock Margin="3"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Button Icon="&#xe6f4;"
                                   Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}"
                                   IsTabStop="False"
                                   IconMargin="0"
                                   h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                                   Command="h:Cattach.ClearTextCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type PasswordBox}}}"
                                   Margin="0,3,1,4"
                                   IconSize="14"
                                  Foreground="{TemplateBinding Foreground}"
                                   Cursor="Arrow"/>-->

                    <Button Margin="0,0,-10,0"
                            h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                            Command="h:Cattach.ClearTextCommand"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:PasswordBox}}}"
                            Style="{DynamicResource {x:Static h:ButtonKeys.Clear}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Circle, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.DefaultKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="Padding" Value="15,0,5,0" />
        <Setter Property="h:Cattach.IconMargin" Value="5" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Password.Circle.Label, TypeInTargetAssembly={x:Type local:PasswordBox}}" BasedOn="{StaticResource {x:Static local:PasswordBox.LabelKey}}" TargetType="{x:Type local:PasswordBox}">
        <Setter Property="Padding" Value="0,0,10,0" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="h:Cattach.IconMargin" Value="5" />
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="90" Background="Transparent">
                        <TextBlock Margin="3"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:PasswordBox.DynamicKey}}" TargetType="{x:Type local:PasswordBox}" />
</ResourceDictionary>

