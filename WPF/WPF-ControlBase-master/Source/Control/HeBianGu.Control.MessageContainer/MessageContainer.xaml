<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Control.MessageContainer"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <Storyboard x:Key="S.Storyboard.RenderTransform.Shake" Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
        <DoubleAnimation RepeatBehavior="Forever"
                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                         From="-10" To="0"
                         Duration="0:0:0.2">
            <DoubleAnimation.EasingFunction>
                <ElasticEase />
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>

    <Storyboard x:Key="S.Storyboard.FontSize.Rebound" Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
        <DoubleAnimation RepeatBehavior="Forever"
                         Storyboard.TargetProperty="FontSize"
                         From="5" To="50"
                         Duration="0:0:2">
            <DoubleAnimation.EasingFunction>
                <BounceEase />
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>

    <Storyboard x:Key="S.Storyboard.Color.Flash" Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
        <ColorAnimation AutoReverse="True"
                        RepeatBehavior="Forever"
                        Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)"
                        From="Green"
                        To="#ED4646"
                        Duration="0:0:2">
            <ColorAnimation.EasingFunction>
                <CubicEase />
            </ColorAnimation.EasingFunction>
        </ColorAnimation>
    </Storyboard>

    <Storyboard x:Key="S.Storyboard.MessageLoad.OpacityRightToLeft" Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)">
            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
            <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="1" />
        </DoubleAnimationUsingKeyFrames>

        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="200" />
            <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="0" />
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="S.Storyboard.MessageHide.OpacityLeftToRight" Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)">
            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
            <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="1" />
            <SplineDoubleKeyFrame KeyTime="00:00:04.7" Value="1" />
            <SplineDoubleKeyFrame KeyTime="00:00:05" Value="0" />
        </DoubleAnimationUsingKeyFrames>

        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="200" />
            <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="0" />
            <SplineDoubleKeyFrame KeyTime="00:00:04.7" Value="0" />
            <SplineDoubleKeyFrame KeyTime="00:00:05" Value="200" />
        </DoubleAnimationUsingKeyFrames>

        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0:0:5">
                <DiscreteObjectKeyFrame.Value>
                    <Visibility>Collapsed</Visibility>
                </DiscreteObjectKeyFrame.Value>
            </DiscreteObjectKeyFrame>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="{ComponentResourceKey ResourceId=S.MessageBase.Default, TypeInTargetAssembly={x:Type local:MessageBase}}" TargetType="{x:Type local:MessageBase}">
        <Setter Property="RenderTransform" Value="{DynamicResource {x:Static h:SystemKeys.TransformGroup}}" />
        <Setter Property="h:TransitionService.IsVisible" Value="False" />
        <Setter Property="h:TransitionService.VisibleActions">
            <Setter.Value>
                <h:TransitionCollection>
                    <h:TranslateTransition StartPoint="200 0" EndPoint="400 0" />
                </h:TransitionCollection>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
        -->
        <!--<BeginStoryboard Storyboard="{DynamicResource S.Storyboard.MessageLoad.OpacityRightToLeft}"/>-->
        <!--
                <BeginStoryboard>
                    <Storyboard Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}">
                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)">
                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                            <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="1" />
                        </DoubleAnimationUsingKeyFrames>

                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="200" />
                            <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ErrorMessage.Default, TypeInTargetAssembly={x:Type local:ErrorMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:ErrorMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ErrorMessage}">
                    <Grid Width="350"
                          Height="60"
                          Margin="0,0,5,5"
                          ToolTip="{TemplateBinding Message}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Border Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="30"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Red}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe701;" />

                        <StackPanel Grid.Column="1" VerticalAlignment="Center" TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}">
                            <TextBlock Margin="0,2" Text="{TemplateBinding Message}" TextTrimming="CharacterEllipsis" />
                            <TextBlock Text="{TemplateBinding Time}" />
                        </StackPanel>

                        <Button Grid.ColumnSpan="2"
                                Margin="10,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                h:Cattach.AllowsAnimation="True"
                                Command="{x:Static local:MessageBase.CloseCommand}"
                                Style="{DynamicResource {x:Static h:ButtonKeys.CloseFlag}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.InfoMessage.Default, TypeInTargetAssembly={x:Type local:InfoMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:InfoMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:InfoMessage}">
                    <Grid Width="350"
                          Height="60"
                          Margin="0,0,5,5"
                          ToolTip="{TemplateBinding Message}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Border Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="30"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe70a;" />

                        <StackPanel Grid.Column="1" VerticalAlignment="Center" TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}">
                            <TextBlock Margin="0,2" Text="{TemplateBinding Message}" TextTrimming="CharacterEllipsis" />
                            <TextBlock Text="{TemplateBinding Time}" />
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.SuccessMessage.Default, TypeInTargetAssembly={x:Type local:SuccessMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:SuccessMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SuccessMessage}">
                    <Grid Width="350"
                          Height="60"
                          Margin="0,0,5,5"
                          ToolTip="{TemplateBinding Message}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Border Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="30"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Green}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe76c;" />

                        <StackPanel Grid.Column="1" VerticalAlignment="Center" TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}">
                            <TextBlock Margin="0,2" Text="{TemplateBinding Message}" TextTrimming="CharacterEllipsis" />
                            <TextBlock Text="{TemplateBinding Time}" />
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.WarnMessage.Default, TypeInTargetAssembly={x:Type local:WarnMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:WarnMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WarnMessage}">
                    <Grid Width="350"
                          Height="60"
                          Margin="0,0,5,5"
                          ToolTip="{TemplateBinding Message}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Border Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="30"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Orange}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe62e;" />

                        <StackPanel Grid.Column="1" VerticalAlignment="Center" TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}">
                            <TextBlock Margin="0,2" Text="{TemplateBinding Message}" TextTrimming="CharacterEllipsis" />
                            <TextBlock Text="{TemplateBinding Time}" />
                        </StackPanel>

                        <Button Grid.ColumnSpan="2"
                                Margin="10,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                h:Cattach.AllowsAnimation="True"
                                Command="{x:Static local:MessageBase.CloseCommand}"
                                Style="{DynamicResource {x:Static h:ButtonKeys.CloseFlag}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.FatalMessage.Default, TypeInTargetAssembly={x:Type local:FatalMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:FatalMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FatalMessage}">
                    <Grid Width="350"
                          Height="60"
                          Margin="0,0,5,5"
                          ToolTip="{TemplateBinding Message}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Border Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="30"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Black}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe718;" />

                        <StackPanel Grid.Column="1" VerticalAlignment="Center" TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}">
                            <TextBlock Margin="0,2" Text="{TemplateBinding Message}" TextTrimming="CharacterEllipsis" />
                            <TextBlock Text="{TemplateBinding Time}" />
                        </StackPanel>

                        <Button Grid.ColumnSpan="2"
                                Margin="10,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                h:Cattach.AllowsAnimation="True"
                                Command="{x:Static local:MessageBase.CloseCommand}"
                                Style="{DynamicResource {x:Static h:ButtonKeys.CloseFlag}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DailogMessage.Default, TypeInTargetAssembly={x:Type local:DailogMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:DailogMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DailogMessage}">
                    <Grid Width="350"
                          Height="100"
                          Margin="0,0,5,5"
                          ToolTip="{TemplateBinding Message}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border Grid.RowSpan="5"
                                Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <TextBlock Grid.RowSpan="3"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="30"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe713;" />

                        <TextBlock Grid.Row="0"
                                   Grid.Column="1"
                                   Margin="0,10,0,0"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding Message}"
                                   TextTrimming="CharacterEllipsis" />

                        <TextBlock Grid.Row="1"
                                   Grid.Column="1"
                                   Margin="0,0,0,-5"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding Time}" />

                        <StackPanel Grid.Row="2"
                                    Grid.Column="1"
                                    Height="{DynamicResource {x:Static h:SystemKeys.RowHeight}}"
                                    Margin="0,0,0,5"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch"
                                    Orientation="Horizontal"
                                    TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}">

                            <Button Margin="10,0"
                                    Command="{x:Static local:MessageBase.CloseCommand}"
                                    Content="忽略"
                                    Style="{DynamicResource {x:Static h:ButtonKeys.Link}}" />

                            <Button Command="{x:Static local:DailogMessage.SumitCommand}" Content="确定" Style="{DynamicResource {x:Static h:ButtonKeys.Link}}" />
                        </StackPanel>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.StringProgressMessage.Default, TypeInTargetAssembly={x:Type local:StringProgressMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:StringProgressMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:StringProgressMessage}">
                    <Grid Width="350"
                          Height="60"
                          Margin="0,0,5,5"
                          ToolTip="{TemplateBinding Message}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Border Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="30"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe70a;" />

                        <StackPanel Grid.Column="1" VerticalAlignment="Center" TextBlock.Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}">
                            <TextBlock Text="{TemplateBinding Message}" TextTrimming="CharacterEllipsis" />
                            <TextBlock Text="{TemplateBinding Time}" />
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.PercentProgressMessage.Default, TypeInTargetAssembly={x:Type local:PercentProgressMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:PercentProgressMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PercentProgressMessage}">
                    <Grid Width="350"
                          Height="60"
                          Margin="5"
                          ToolTip="{TemplateBinding Value}">
                        <Border Grid.ColumnSpan="2"
                                Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />

                        <!--<TextBlock Text="&#xe70a;" Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"  FontSize="30"  Foreground="{DynamicResource {x:Static h:BrushKeys.Accent}}" VerticalAlignment="Center" HorizontalAlignment="Center"/>-->

                        <ProgressBar Width="300"
                                     Height="15"
                                     h:Cattach.CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                     Maximum="100.0"
                                     Minimum="0.0"
                                     Style="{DynamicResource {x:Static h:ProgressBarKeys.Handy}}"
                                     Value="{TemplateBinding Value}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.WaittingMessage.Default, TypeInTargetAssembly={x:Type local:WaittingMessage}}" BasedOn="{StaticResource {x:Static local:MessageBase.DefaultKey}}" TargetType="{x:Type local:WaittingMessage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:WaittingMessage}">
                    <Grid Width="Auto"
                          Height="Auto"
                          Margin="10,2"
                          ToolTip="{TemplateBinding Message}">
                        <TextBlock Margin="20,0"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Top"
                                   FontSize="25"
                                   Foreground="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                   RenderTransform="{StaticResource {x:Static h:SystemKeys.TransformGroup}}"
                                   RenderTransformOrigin="0.5,0.5"
                                   Text="{TemplateBinding Message}"
                                   TextTrimming="CharacterEllipsis">
                            <TextBlock.Triggers>
                                <EventTrigger RoutedEvent="Button.Loaded">
                                    <BeginStoryboard Storyboard="{StaticResource S.Storyboard.RenderTransform.Shake}" />
                                </EventTrigger>
                            </TextBlock.Triggers>
                        </TextBlock>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.MessageContainer.Default, TypeInTargetAssembly={x:Type local:MessageContainer}}" TargetType="{x:Type local:MessageContainer}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <!--<Setter Property="BorderBrush" Value="{x:Null}"/>-->
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <!--<Setter Property="FocusVisualStyle" Value="{x:Null}"/>-->
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <!--<Setter Property="ItemsSource" Value="{Binding Source,RelativeSource={RelativeSource Mode=Self}}" />-->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel HorizontalAlignment="Right" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MessageContainer}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
