<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Control.Message"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <h:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter" />
    <h:MathMultipleConverter x:Key="MathMultipleConverter" Operation="Multiply" />

    <Style x:Key="MaterialDesignSnackbarActionButton" TargetType="Button">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="h:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignSnackbarRipple}" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="24,0,24,0" />
        <Setter Property="Margin" Value="24,-14,-24,-14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Root" Background="{TemplateBinding Background}">
                        <h:Ripple Padding="{TemplateBinding Padding}"
                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  Focusable="False"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignSnackbarMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignSnackbarActionLightButton" BasedOn="{StaticResource MaterialDesignSnackbarActionButton}" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
    </Style>

    <Style x:Key="MaterialDesignSnackbarActionMidButton" BasedOn="{StaticResource MaterialDesignSnackbarActionButton}" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
    </Style>

    <Style x:Key="MaterialDesignSnackbarActionDarkButton" BasedOn="{StaticResource MaterialDesignSnackbarActionButton}" TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
    </Style>

    <Style TargetType="local:SnackbarMessage">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SnackbarMessage">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <ContentPresenter MaxHeight="36"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          DockPanel.Dock="Left">

                            <ContentPresenter.Resources>
                                <DataTemplate DataType="{x:Type system:String}">
                                    <TextBlock Text="{Binding}">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Setter Property="FontSize" Value="14" />
                                                <Setter Property="TextWrapping" Value="WrapWithOverflow" />
                                                <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </DataTemplate>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                        <Button x:Name="PART_ActionButton"
                                Grid.Column="1"
                                HorizontalAlignment="Right"
                                Command="{TemplateBinding ActionCommand}"
                                CommandParameter="{TemplateBinding ActionCommandParameter}"
                                Content="{TemplateBinding ActionContent}"
                                ContentStringFormat="{TemplateBinding ActionContentStringFormat}"
                                ContentTemplate="{TemplateBinding ActionContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ActionContentTemplateSelector}"
                                DockPanel.Dock="Right"
                                Style="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:Snackbar}}, Path=ActionButtonStyle}"
                                Visibility="{TemplateBinding ActionContent,
                                                             Converter={StaticResource NullableToVisibilityConverter}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.Snackbar.Default" BasedOn="{StaticResource {x:Static h:ControlKeys.ForegroundDynamic}}" TargetType="local:Snackbar">
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="14" />
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity2}}" />-->
        <Setter Property="ActionButtonStyle" Value="{StaticResource MaterialDesignSnackbarActionButton}" />
        <Setter Property="MinWidth" Value="288" />
        <Setter Property="MaxWidth" Value="568" />
        <Setter Property="Padding" Value="24,14,24,14" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:Snackbar">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ActivateStoryboard" Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}" Duration="0:0:0.3">
                            <DoubleAnimation Storyboard.TargetName="Root"
                                             Storyboard.TargetProperty="Tag"
                                             From="0" To="3"
                                             Duration="0:0:0.3">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation BeginTime="0"
                                             Storyboard.TargetName="ContentPresenter"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0" />
                            <DoubleAnimation BeginTime="0:0:0.075"
                                             Storyboard.TargetName="ContentPresenter"
                                             Storyboard.TargetProperty="Opacity"
                                             From="0" To="1"
                                             Duration="0:0:0.225">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>

                            <DoubleAnimation BeginTime="0:0:0.075"
                                             Storyboard.TargetProperty="Opacity"
                                             From="0" To="1"
                                             Duration="0:0:0.225">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>

                        </Storyboard>
                        <Storyboard x:Key="DeactivateStoryboard" Timeline.DesiredFrameRate="{x:Static h:StoryboardSetting.DesiredFrameRate}" Duration="0:0:0.3">
                            <!--<DoubleAnimation Storyboard.TargetName="Root" Storyboard.TargetProperty="Tag" From="3" To="0" Duration="0:0:0.3">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>-->
                            <DoubleAnimation BeginTime="0:0:0.075"
                                             Storyboard.TargetProperty="Opacity"
                                             From="1" To="0"
                                             Duration="0:0:0.225">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <StackPanel x:Name="Root">
                        <StackPanel.Tag>
                            <system:Double>0.0</system:Double>
                        </StackPanel.Tag>
                        <StackPanel.Height>
                            <MultiBinding Converter="{StaticResource MathMultipleConverter}">
                                <Binding ElementName="ContentBorder" Path="ActualHeight" />
                                <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                            </MultiBinding>
                        </StackPanel.Height>

                        <Border Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                            <Border x:Name="ContentBorder"
                                    MinHeight="24"
                                    VerticalAlignment="Stretch"
                                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}"
                                    BorderBrush="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}"
                                    CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                                    Opacity="1"
                                    SnapsToDevicePixels="True">

                                <ContentPresenter x:Name="ContentPresenter"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Message}" />
                            </Border>
                        </Border>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ActivateStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource DeactivateStoryboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Stretch">
                            <Setter TargetName="ContentBorder" Property="CornerRadius" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HorizontalAlignment" Value="Stretch">
                <Setter Property="MaxWidth" Value="{x:Static system:Double.MaxValue}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="S.Snackbar.Accent" BasedOn="{StaticResource S.Snackbar.Default}" TargetType="local:Snackbar">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
    </Style>

    <Style x:Key="S.Snackbar.Single" BasedOn="{StaticResource S.Snackbar.Default}" TargetType="local:Snackbar">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
    </Style>

    <Style x:Key="S.Snackbar.Top" BasedOn="{StaticResource S.Snackbar.Default}" TargetType="local:Snackbar">
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style BasedOn="{StaticResource S.Snackbar.Default}" TargetType="local:Snackbar" />
</ResourceDictionary>