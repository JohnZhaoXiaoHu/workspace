<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cl="clr-namespace:System.Collections;assembly=mscorlib"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Control.AnimationBox">


    <Style x:Key="{ComponentResourceKey ResourceId=S.AnimationBox.Default, TypeInTargetAssembly={x:Type local:AnimationBox}}" TargetType="{x:Type local:AnimationBox}">
        <Setter Property="SplitMilliSecond" Value="-700" />
        <Setter Property="RepeatBehavior" Value="Forever" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AnimationBox}">
                    <Grid>
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid>
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="Loaded">
                                <h:InvokeRandomSplitAnimationAction RepeatBehavior="{Binding RelativeSource={RelativeSource AncestorType=local:AnimationBox}, Path=RepeatBehavior}" SplitMilliSecond="{Binding RelativeSource={RelativeSource AncestorType=local:AnimationBox}, Path=SplitMilliSecond}">
                                    <h:InvokeRandomSplitAnimationAction.Timelines>
                                        <h:RandomDoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                     From="1" To="0"
                                                                     Duration="00:00:01" />
                                    </h:InvokeRandomSplitAnimationAction.Timelines>
                                </h:InvokeRandomSplitAnimationAction>
                            </h:EventTrigger>
                        </h:Interaction.Triggers>
                    </Grid>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.AnimationBox.Random.OST, TypeInTargetAssembly={x:Type local:AnimationBox}}" BasedOn="{StaticResource {x:Static local:AnimationBox.DefaultKey}}" TargetType="{x:Type local:AnimationBox}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Grid>
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="Loaded">
                                <h:InvokeRandomSplitAnimationAction RepeatBehavior="{Binding RelativeSource={RelativeSource AncestorType=local:AnimationBox}, Path=RepeatBehavior}" SplitMilliSecond="{Binding RelativeSource={RelativeSource AncestorType=local:AnimationBox}, Path=SplitMilliSecond}">
                                    <h:InvokeRandomSplitAnimationAction.Timelines>
                                        <h:RandomDoubleAnimation Max="3" Min="1"
                                                                     UseFrom="False"
                                                                     UseTo="True"
                                                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                                     From="0"
                                                                     Duration="00:00:01" />
                                            <h:RandomDoubleAnimation Max="3" Min="1"
                                                                     UseFrom="False"
                                                                     UseTo="True"
                                                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                                     From="0"
                                                                     Duration="00:00:01" />

                                            <h:RandomDoubleAnimation Max="100" Min="-100"
                                                                     UseFrom="False"
                                                                     UseTo="True"
                                                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
                                                                     From="0"
                                                                     Duration="00:00:01" />
                                            <h:RandomDoubleAnimation Max="100" Min="-100"
                                                                     UseFrom="False"
                                                                     UseTo="True"
                                                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                                                     From="0"
                                                                     Duration="00:00:01" />
                                        <h:RandomDoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                     From="1" To="0"
                                                                     Duration="00:00:01" />
                                    </h:InvokeRandomSplitAnimationAction.Timelines>
                                </h:InvokeRandomSplitAnimationAction>
                            </h:EventTrigger>
                        </h:Interaction.Triggers>
                    </Grid>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:AnimationBox.DefaultKey}}" TargetType="{x:Type local:AnimationBox}" />
</ResourceDictionary>
