<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Control.TextEditor"
                    xmlns:sys="clr-namespace:System;assembly=netstandard">


    <ControlTemplate x:Key="S.ControlTemplate.TextEditor">
        <UniformGrid Margin="2,0" Rows="1">
            <Button h:Cattach.Icon="&#xe858;"
                    h:Cattach.IconMargin="0"
                    h:Cattach.IconSize="12"
                    Command="{x:Static local:TextEditor.Sure}"
                    Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}"
                    Visibility="{Binding RelativeSource={RelativeSource AncestorType=local:TextEditor}, Path=UseCancel, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}, Mode=TwoWay}" />
            <Button h:Cattach.Icon="&#xe857;"
                    h:Cattach.IconMargin="0"
                    h:Cattach.IconSize="12"
                    Command="{x:Static local:TextEditor.Cancel}"
                    Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}"
                    Visibility="{Binding RelativeSource={RelativeSource AncestorType=local:TextEditor}, Path=UseSure, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}, Mode=TwoWay}" />
        </UniformGrid>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextEditor.Default, TypeInTargetAssembly={x:Type local:TextEditor}}" TargetType="{x:Type local:TextEditor}">
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="h:Cattach.Watermark" Value="点击编辑数据" />
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="DefaultType" Value="{x:Type sys:String}" />
        <Setter Property="TextBlockStyle">
            <Setter.Value>
                <Style TargetType="TextBlock">
                    <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />-->
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource AncestorType=local:TextEditor},Path=FontSize}"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="TextBoxStyle">
            <Setter.Value>
                <Style TargetType="TextBox">
                    <Setter Property="h:Cattach.Title" Value="{Binding RelativeSource={RelativeSource AncestorType=local:TextEditor}, Path=(h:Cattach.Title)}" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="BorderBrush" Value="Red" />
                    <!--<Setter Property="Margin" Value="-2,0" />
                    <Setter Property="Padding" Value="5,2" />-->
                    <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                    <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
                    <Setter Property="h:Cattach.AttachContent" Value="{StaticResource S.ControlTemplate.TextEditor}" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TextEditor}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <TextBlock x:Name="tb_mark"
                                       VerticalAlignment="Center"
                                       Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}"
                                       IsHitTestVisible="False"
                                       Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                                       Text="{TemplateBinding h:Cattach.Watermark}"
                                       Visibility="Collapsed" />
                            <TextBlock x:Name="PART_TextBlock" Style="{TemplateBinding TextBlockStyle}" Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Text}" />
                            <TextBox x:Name="PART_TextBox"
                                     Style="{TemplateBinding TextBoxStyle}"
                                     Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=EditText, UpdateSourceTrigger=PropertyChanged}"
                                     Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsEditting, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}">
                                <TextBox.ToolTip>
                                    <ToolTip x:Name="tooltip"
                                             Padding="0"
                                             Background="Transparent"
                                             BorderThickness="0"
                                             StaysOpen="True">
                                        <Border Height="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"
                                                Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                                                BorderBrush="Transparent"
                                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                                            <TextBlock Margin="10,0"
                                                       VerticalAlignment="Center"
                                                       FontSize="{DynamicResource {x:Static h:FontSizeKeys.Default}}"
                                                       Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
                                                <Run Text="数据错误 ：" />
                                                <Run Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Message}" />
                                            </TextBlock>
                                        </Border>
                                    </ToolTip>
                                </TextBox.ToolTip>
                            </TextBox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Message" Value="{x:Null}">
                            <Setter TargetName="PART_TextBox" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
                            <Setter TargetName="tooltip" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="tb_mark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="tb_mark" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextEditor.Text, TypeInTargetAssembly={x:Type local:TextEditor}}" BasedOn="{StaticResource {x:Static local:TextEditor.DefaultKey}}" TargetType="{x:Type local:TextEditor}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="h:Cattach.Watermark" Value="" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="UseCancel" Value="False" />
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="UseSure" Value="False" />
        <Setter Property="TextBlockStyle">
            <Setter.Value>
                <Style TargetType="TextBlock">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="TextWrapping" Value="Wrap" />
                    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text}" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="TextBoxStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Static h:TextBoxKeys.Editable}}" TargetType="TextBox">
                    <Setter Property="VerticalAlignment" Value="Stretch" />
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="TextAlignment" Value="Center" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="TextWrapping" Value="Wrap" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TextEditor}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <TextBlock x:Name="PART_TextBlock"
                                       Foreground="{TemplateBinding Foreground}"
                                       Style="{TemplateBinding TextBlockStyle}"
                                       Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Text}" />
                            <TextBox x:Name="PART_TextBox"
                                     Foreground="{TemplateBinding Foreground}"
                                     Style="{TemplateBinding TextBoxStyle}"
                                     Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=EditText, UpdateSourceTrigger=PropertyChanged}"
                                     Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsEditting, Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextEditor.TextBox, TypeInTargetAssembly={x:Type local:TextEditor}}" BasedOn="{StaticResource {x:Static local:TextEditor.DefaultKey}}" TargetType="{x:Type local:TextEditor}">
        <Setter Property="TextBoxStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
                    <Setter Property="h:Cattach.Title" Value="{Binding RelativeSource={RelativeSource AncestorType=local:TextEditor}, Path=(h:Cattach.Title)}" />
                    <Setter Property="h:Cattach.AttachContent" Value="{StaticResource S.ControlTemplate.TextEditor}" />
                    <Setter Property="Height" Value="Auto" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:TextEditor.DefaultKey}}" TargetType="{x:Type local:TextEditor}" />
</ResourceDictionary>
